{"ast":null,"code":"import Decimal from 'decimal.js';\nimport { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { nearlyEqual } from '../../utils/number.js';\nimport { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual.js';\nimport { createAlgorithm11 } from '../../type/matrix/utils/algorithm11.js';\nimport { createAlgorithm12 } from '../../type/matrix/utils/algorithm12.js';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14.js';\nvar name = 'floor';\nvar dependencies = ['typed', 'config', 'round', 'matrix', 'equalScalar', 'zeros', 'DenseMatrix'];\nexport var createFloorNumber = /* #__PURE__ */factory(name, ['typed', 'config', 'round'], _ref => {\n  var {\n    typed,\n    config,\n    round\n  } = _ref;\n  return typed(name, {\n    number: function number(x) {\n      if (nearlyEqual(x, round(x), config.epsilon)) {\n        return round(x);\n      } else {\n        return Math.floor(x);\n      }\n    },\n    'number, number': function numberNumber(x, n) {\n      if (nearlyEqual(x, round(x, n), config.epsilon)) {\n        return round(x, n);\n      } else {\n        var [number, exponent] = \"\".concat(x, \"e\").split('e');\n        var result = Math.floor(Number(\"\".concat(number, \"e\").concat(Number(exponent) + n)));\n        [number, exponent] = \"\".concat(result, \"e\").split('e');\n        return Number(\"\".concat(number, \"e\").concat(Number(exponent) - n));\n      }\n    }\n  });\n});\nexport var createFloor = /* #__PURE__ */factory(name, dependencies, _ref2 => {\n  var {\n    typed,\n    config,\n    round,\n    matrix,\n    equalScalar,\n    zeros,\n    DenseMatrix\n  } = _ref2;\n  var algorithm11 = createAlgorithm11({\n    typed,\n    equalScalar\n  });\n  var algorithm12 = createAlgorithm12({\n    typed,\n    DenseMatrix\n  });\n  var algorithm14 = createAlgorithm14({\n    typed\n  });\n  var floorNumber = createFloorNumber({\n    typed,\n    config,\n    round\n  });\n  /**\n   * Round a value towards minus infinity.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.floor(x)\n   *    math.floor(x, n)\n   *\n   * Examples:\n   *\n   *    math.floor(3.2)              // returns number 3\n   *    math.floor(3.8)              // returns number 3\n   *    math.floor(-4.2)             // returns number -5\n   *    math.floor(-4.7)             // returns number -5\n   *\n   *    math.floor(3.212, 2)          // returns number 3.21\n   *    math.floor(3.288, 2)          // returns number 3.28\n   *    math.floor(-4.212, 2)         // returns number -4.22\n   *    math.floor(-4.782, 2)         // returns number -4.79\n   *\n   *    const c = math.complex(3.24, -2.71)\n   *    math.floor(c)                 // returns Complex 3 - 3i\n   *    math.floor(c, 1)              // returns Complex 3.2 - 2.8i\n   *\n   *    math.floor([3.2, 3.8, -4.7])       // returns Array [3, 3, -5]\n   *    math.floor([3.21, 3.82, -4.71], 1)  // returns Array [3.2, 3.8, -4.8]\n   *\n   *    math.floor(math.tau, [2, 3])  // returns Array [6.28, 6.283]\n   *\n   *    // Note that floor(array, array) currently not implemented.\n   *\n   * See also:\n   *\n   *    ceil, fix, round\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded\n   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value\n   */\n\n  return typed('floor', {\n    number: floorNumber.signatures.number,\n    'number,number': floorNumber.signatures['number,number'],\n    Complex: function Complex(x) {\n      return x.floor();\n    },\n    'Complex, number': function ComplexNumber(x, n) {\n      return x.floor(n);\n    },\n    'Complex, BigNumber': function ComplexBigNumber(x, n) {\n      return x.floor(n.toNumber());\n    },\n    BigNumber: function BigNumber(x) {\n      if (bigNearlyEqual(x, round(x), config.epsilon)) {\n        return round(x);\n      } else {\n        return x.floor();\n      }\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, n) {\n      if (bigNearlyEqual(x, round(x, n), config.epsilon)) {\n        return round(x, n);\n      } else {\n        return x.toDecimalPlaces(n.toNumber(), Decimal.ROUND_FLOOR);\n      }\n    },\n    Fraction: function Fraction(x) {\n      return x.floor();\n    },\n    'Fraction, number': function FractionNumber(x, n) {\n      return x.floor(n);\n    },\n    'Fraction, BigNumber': function FractionBigNumber(x, n) {\n      return x.floor(n.toNumber());\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since floor(0) = 0\n      return deepMap(x, this, true);\n    },\n    'Array, number | BigNumber': function ArrayNumberBigNumber(x, n) {\n      // deep map collection, skip zeros since ceil(0) = 0\n      return deepMap(x, i => this(i, n), true);\n    },\n    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {\n      return algorithm11(x, y, this, false);\n    },\n    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {\n      return algorithm14(x, y, this, false);\n    },\n    'number | Complex | Fraction | BigNumber, Array': function numberComplexFractionBigNumberArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, this, true).valueOf();\n    },\n    'number | Complex | Fraction | BigNumber, Matrix': function numberComplexFractionBigNumberMatrix(x, y) {\n      if (equalScalar(x, 0)) return zeros(y.size(), y.storage());\n      if (y.storage() === 'dense') {\n        return algorithm14(y, x, this, true);\n      }\n      return algorithm12(y, x, this, true);\n    }\n  });\n});","map":{"version":3,"names":["Decimal","factory","deepMap","nearlyEqual","bigNearlyEqual","createAlgorithm11","createAlgorithm12","createAlgorithm14","name","dependencies","createFloorNumber","_ref","typed","config","round","number","x","epsilon","Math","floor","numberNumber","n","exponent","concat","split","result","Number","createFloor","_ref2","matrix","equalScalar","zeros","DenseMatrix","algorithm11","algorithm12","algorithm14","floorNumber","signatures","Complex","ComplexNumber","ComplexBigNumber","toNumber","BigNumber","BigNumberBigNumber","toDecimalPlaces","ROUND_FLOOR","Fraction","FractionNumber","FractionBigNumber","ArrayMatrix","ArrayNumberBigNumber","i","SparseMatrixNumberBigNumber","y","DenseMatrixNumberBigNumber","numberComplexFractionBigNumberArray","valueOf","numberComplexFractionBigNumberMatrix","size","storage"],"sources":["/Users/front-end-projects/websites/calculator-app/node_modules/mathjs/lib/esm/function/arithmetic/floor.js"],"sourcesContent":["import Decimal from 'decimal.js';\nimport { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { nearlyEqual } from '../../utils/number.js';\nimport { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual.js';\nimport { createAlgorithm11 } from '../../type/matrix/utils/algorithm11.js';\nimport { createAlgorithm12 } from '../../type/matrix/utils/algorithm12.js';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14.js';\nvar name = 'floor';\nvar dependencies = ['typed', 'config', 'round', 'matrix', 'equalScalar', 'zeros', 'DenseMatrix'];\nexport var createFloorNumber = /* #__PURE__ */factory(name, ['typed', 'config', 'round'], _ref => {\n  var {\n    typed,\n    config,\n    round\n  } = _ref;\n  return typed(name, {\n    number: function number(x) {\n      if (nearlyEqual(x, round(x), config.epsilon)) {\n        return round(x);\n      } else {\n        return Math.floor(x);\n      }\n    },\n    'number, number': function numberNumber(x, n) {\n      if (nearlyEqual(x, round(x, n), config.epsilon)) {\n        return round(x, n);\n      } else {\n        var [number, exponent] = \"\".concat(x, \"e\").split('e');\n        var result = Math.floor(Number(\"\".concat(number, \"e\").concat(Number(exponent) + n)));\n        [number, exponent] = \"\".concat(result, \"e\").split('e');\n        return Number(\"\".concat(number, \"e\").concat(Number(exponent) - n));\n      }\n    }\n  });\n});\nexport var createFloor = /* #__PURE__ */factory(name, dependencies, _ref2 => {\n  var {\n    typed,\n    config,\n    round,\n    matrix,\n    equalScalar,\n    zeros,\n    DenseMatrix\n  } = _ref2;\n  var algorithm11 = createAlgorithm11({\n    typed,\n    equalScalar\n  });\n  var algorithm12 = createAlgorithm12({\n    typed,\n    DenseMatrix\n  });\n  var algorithm14 = createAlgorithm14({\n    typed\n  });\n  var floorNumber = createFloorNumber({\n    typed,\n    config,\n    round\n  });\n  /**\n   * Round a value towards minus infinity.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.floor(x)\n   *    math.floor(x, n)\n   *\n   * Examples:\n   *\n   *    math.floor(3.2)              // returns number 3\n   *    math.floor(3.8)              // returns number 3\n   *    math.floor(-4.2)             // returns number -5\n   *    math.floor(-4.7)             // returns number -5\n   *\n   *    math.floor(3.212, 2)          // returns number 3.21\n   *    math.floor(3.288, 2)          // returns number 3.28\n   *    math.floor(-4.212, 2)         // returns number -4.22\n   *    math.floor(-4.782, 2)         // returns number -4.79\n   *\n   *    const c = math.complex(3.24, -2.71)\n   *    math.floor(c)                 // returns Complex 3 - 3i\n   *    math.floor(c, 1)              // returns Complex 3.2 - 2.8i\n   *\n   *    math.floor([3.2, 3.8, -4.7])       // returns Array [3, 3, -5]\n   *    math.floor([3.21, 3.82, -4.71], 1)  // returns Array [3.2, 3.8, -4.8]\n   *\n   *    math.floor(math.tau, [2, 3])  // returns Array [6.28, 6.283]\n   *\n   *    // Note that floor(array, array) currently not implemented.\n   *\n   * See also:\n   *\n   *    ceil, fix, round\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded\n   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value\n   */\n\n  return typed('floor', {\n    number: floorNumber.signatures.number,\n    'number,number': floorNumber.signatures['number,number'],\n    Complex: function Complex(x) {\n      return x.floor();\n    },\n    'Complex, number': function ComplexNumber(x, n) {\n      return x.floor(n);\n    },\n    'Complex, BigNumber': function ComplexBigNumber(x, n) {\n      return x.floor(n.toNumber());\n    },\n    BigNumber: function BigNumber(x) {\n      if (bigNearlyEqual(x, round(x), config.epsilon)) {\n        return round(x);\n      } else {\n        return x.floor();\n      }\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, n) {\n      if (bigNearlyEqual(x, round(x, n), config.epsilon)) {\n        return round(x, n);\n      } else {\n        return x.toDecimalPlaces(n.toNumber(), Decimal.ROUND_FLOOR);\n      }\n    },\n    Fraction: function Fraction(x) {\n      return x.floor();\n    },\n    'Fraction, number': function FractionNumber(x, n) {\n      return x.floor(n);\n    },\n    'Fraction, BigNumber': function FractionBigNumber(x, n) {\n      return x.floor(n.toNumber());\n    },\n    'Array | Matrix': function ArrayMatrix(x) {\n      // deep map collection, skip zeros since floor(0) = 0\n      return deepMap(x, this, true);\n    },\n    'Array, number | BigNumber': function ArrayNumberBigNumber(x, n) {\n      // deep map collection, skip zeros since ceil(0) = 0\n      return deepMap(x, i => this(i, n), true);\n    },\n    'SparseMatrix, number | BigNumber': function SparseMatrixNumberBigNumber(x, y) {\n      return algorithm11(x, y, this, false);\n    },\n    'DenseMatrix, number | BigNumber': function DenseMatrixNumberBigNumber(x, y) {\n      return algorithm14(x, y, this, false);\n    },\n    'number | Complex | Fraction | BigNumber, Array': function numberComplexFractionBigNumberArray(x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, this, true).valueOf();\n    },\n    'number | Complex | Fraction | BigNumber, Matrix': function numberComplexFractionBigNumberMatrix(x, y) {\n      if (equalScalar(x, 0)) return zeros(y.size(), y.storage());\n\n      if (y.storage() === 'dense') {\n        return algorithm14(y, x, this, true);\n      }\n\n      return algorithm12(y, x, this, true);\n    }\n  });\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}