{"ast":null,"code":"import { deepMap } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nimport { gammaG, gammaNumber, gammaP } from '../../plain/number/index.js';\nvar name = 'gamma';\nvar dependencies = ['typed', 'config', 'multiplyScalar', 'pow', 'BigNumber', 'Complex'];\nexport var createGamma = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    multiplyScalar,\n    pow,\n    BigNumber: _BigNumber,\n    Complex: _Complex\n  } = _ref;\n\n  /**\n   * Compute the gamma function of a value using Lanczos approximation for\n   * small values, and an extended Stirling approximation for large values.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.gamma(n)\n   *\n   * Examples:\n   *\n   *    math.gamma(5)       // returns 24\n   *    math.gamma(-0.5)    // returns -3.5449077018110335\n   *    math.gamma(math.i)  // returns -0.15494982830180973 - 0.49801566811835596i\n   *\n   * See also:\n   *\n   *    combinations, factorial, permutations\n   *\n   * @param {number | Array | Matrix} n   A real or complex number\n   * @return {number | Array | Matrix}    The gamma of `n`\n   */\n  return typed(name, {\n    number: gammaNumber,\n    Complex: function Complex(n) {\n      if (n.im === 0) {\n        return this(n.re);\n      } // Lanczos approximation doesn't work well with real part lower than 0.5\n      // So reflection formula is required\n\n      if (n.re < 0.5) {\n        // Euler's reflection formula\n        // gamma(1-z) * gamma(z) = PI / sin(PI * z)\n        // real part of Z should not be integer [sin(PI) == 0 -> 1/0 - undefined]\n        // thanks to imperfect sin implementation sin(PI * n) != 0\n        // we can safely use it anyway\n        var _t = new _Complex(1 - n.re, -n.im);\n        var r = new _Complex(Math.PI * n.re, Math.PI * n.im);\n        return new _Complex(Math.PI).div(r.sin()).div(this(_t));\n      } // Lanczos approximation\n      // z -= 1\n\n      n = new _Complex(n.re - 1, n.im); // x = gammaPval[0]\n\n      var x = new _Complex(gammaP[0], 0); // for (i, gammaPval) in enumerate(gammaP):\n\n      for (var i = 1; i < gammaP.length; ++i) {\n        // x += gammaPval / (z + i)\n        var gammaPval = new _Complex(gammaP[i], 0);\n        x = x.add(gammaPval.div(n.add(i)));\n      } // t = z + gammaG + 0.5\n\n      var t = new _Complex(n.re + gammaG + 0.5, n.im); // y = sqrt(2 * pi) * t ** (z + 0.5) * exp(-t) * x\n\n      var twoPiSqrt = Math.sqrt(2 * Math.PI);\n      var tpow = t.pow(n.add(0.5));\n      var expt = t.neg().exp(); // y = [x] * [sqrt(2 * pi)] * [t ** (z + 0.5)] * [exp(-t)]\n\n      return x.mul(twoPiSqrt).mul(tpow).mul(expt);\n    },\n    BigNumber: function BigNumber(n) {\n      if (n.isInteger()) {\n        return n.isNegative() || n.isZero() ? new _BigNumber(Infinity) : bigFactorial(n.minus(1));\n      }\n      if (!n.isFinite()) {\n        return new _BigNumber(n.isNegative() ? NaN : Infinity);\n      }\n      throw new Error('Integer BigNumber expected');\n    },\n    'Array | Matrix': function ArrayMatrix(n) {\n      return deepMap(n, this);\n    }\n  });\n  /**\n   * Calculate factorial for a BigNumber\n   * @param {BigNumber} n\n   * @returns {BigNumber} Returns the factorial of n\n   */\n\n  function bigFactorial(n) {\n    if (n < 8) {\n      return new _BigNumber([1, 1, 2, 6, 24, 120, 720, 5040][n]);\n    }\n    var precision = config.precision + (Math.log(n.toNumber()) | 0);\n    var Big = _BigNumber.clone({\n      precision\n    });\n    if (n % 2 === 1) {\n      return n.times(bigFactorial(new _BigNumber(n - 1)));\n    }\n    var p = n;\n    var prod = new Big(n);\n    var sum = n.toNumber();\n    while (p > 2) {\n      p -= 2;\n      sum += p;\n      prod = prod.times(sum);\n    }\n    return new _BigNumber(prod.toPrecision(_BigNumber.precision));\n  }\n});","map":{"version":3,"names":["deepMap","factory","gammaG","gammaNumber","gammaP","name","dependencies","createGamma","_ref","typed","config","multiplyScalar","pow","BigNumber","_BigNumber","Complex","_Complex","number","n","im","re","_t","r","Math","PI","div","sin","x","i","length","gammaPval","add","t","twoPiSqrt","sqrt","tpow","expt","neg","exp","mul","isInteger","isNegative","isZero","Infinity","bigFactorial","minus","isFinite","NaN","Error","ArrayMatrix","precision","log","toNumber","Big","clone","times","p","prod","sum","toPrecision"],"sources":["/Users/front-end-projects/websites/calculator-app/node_modules/mathjs/lib/esm/function/probability/gamma.js"],"sourcesContent":["import { deepMap } from '../../utils/collection.js';\nimport { factory } from '../../utils/factory.js';\nimport { gammaG, gammaNumber, gammaP } from '../../plain/number/index.js';\nvar name = 'gamma';\nvar dependencies = ['typed', 'config', 'multiplyScalar', 'pow', 'BigNumber', 'Complex'];\nexport var createGamma = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    multiplyScalar,\n    pow,\n    BigNumber: _BigNumber,\n    Complex: _Complex\n  } = _ref;\n\n  /**\n   * Compute the gamma function of a value using Lanczos approximation for\n   * small values, and an extended Stirling approximation for large values.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.gamma(n)\n   *\n   * Examples:\n   *\n   *    math.gamma(5)       // returns 24\n   *    math.gamma(-0.5)    // returns -3.5449077018110335\n   *    math.gamma(math.i)  // returns -0.15494982830180973 - 0.49801566811835596i\n   *\n   * See also:\n   *\n   *    combinations, factorial, permutations\n   *\n   * @param {number | Array | Matrix} n   A real or complex number\n   * @return {number | Array | Matrix}    The gamma of `n`\n   */\n  return typed(name, {\n    number: gammaNumber,\n    Complex: function Complex(n) {\n      if (n.im === 0) {\n        return this(n.re);\n      } // Lanczos approximation doesn't work well with real part lower than 0.5\n      // So reflection formula is required\n\n\n      if (n.re < 0.5) {\n        // Euler's reflection formula\n        // gamma(1-z) * gamma(z) = PI / sin(PI * z)\n        // real part of Z should not be integer [sin(PI) == 0 -> 1/0 - undefined]\n        // thanks to imperfect sin implementation sin(PI * n) != 0\n        // we can safely use it anyway\n        var _t = new _Complex(1 - n.re, -n.im);\n\n        var r = new _Complex(Math.PI * n.re, Math.PI * n.im);\n        return new _Complex(Math.PI).div(r.sin()).div(this(_t));\n      } // Lanczos approximation\n      // z -= 1\n\n\n      n = new _Complex(n.re - 1, n.im); // x = gammaPval[0]\n\n      var x = new _Complex(gammaP[0], 0); // for (i, gammaPval) in enumerate(gammaP):\n\n      for (var i = 1; i < gammaP.length; ++i) {\n        // x += gammaPval / (z + i)\n        var gammaPval = new _Complex(gammaP[i], 0);\n        x = x.add(gammaPval.div(n.add(i)));\n      } // t = z + gammaG + 0.5\n\n\n      var t = new _Complex(n.re + gammaG + 0.5, n.im); // y = sqrt(2 * pi) * t ** (z + 0.5) * exp(-t) * x\n\n      var twoPiSqrt = Math.sqrt(2 * Math.PI);\n      var tpow = t.pow(n.add(0.5));\n      var expt = t.neg().exp(); // y = [x] * [sqrt(2 * pi)] * [t ** (z + 0.5)] * [exp(-t)]\n\n      return x.mul(twoPiSqrt).mul(tpow).mul(expt);\n    },\n    BigNumber: function BigNumber(n) {\n      if (n.isInteger()) {\n        return n.isNegative() || n.isZero() ? new _BigNumber(Infinity) : bigFactorial(n.minus(1));\n      }\n\n      if (!n.isFinite()) {\n        return new _BigNumber(n.isNegative() ? NaN : Infinity);\n      }\n\n      throw new Error('Integer BigNumber expected');\n    },\n    'Array | Matrix': function ArrayMatrix(n) {\n      return deepMap(n, this);\n    }\n  });\n  /**\n   * Calculate factorial for a BigNumber\n   * @param {BigNumber} n\n   * @returns {BigNumber} Returns the factorial of n\n   */\n\n  function bigFactorial(n) {\n    if (n < 8) {\n      return new _BigNumber([1, 1, 2, 6, 24, 120, 720, 5040][n]);\n    }\n\n    var precision = config.precision + (Math.log(n.toNumber()) | 0);\n\n    var Big = _BigNumber.clone({\n      precision\n    });\n\n    if (n % 2 === 1) {\n      return n.times(bigFactorial(new _BigNumber(n - 1)));\n    }\n\n    var p = n;\n    var prod = new Big(n);\n    var sum = n.toNumber();\n\n    while (p > 2) {\n      p -= 2;\n      sum += p;\n      prod = prod.times(sum);\n    }\n\n    return new _BigNumber(prod.toPrecision(_BigNumber.precision));\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}