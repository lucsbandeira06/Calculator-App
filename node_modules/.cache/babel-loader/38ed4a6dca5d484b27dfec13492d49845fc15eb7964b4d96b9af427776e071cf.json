{"ast":null,"code":"import { isConstantNode, isParenthesisNode } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nimport { createUtil } from './simplify/util.js';\nimport { createSimplifyConstant } from './simplify/simplifyConstant.js';\nimport { hasOwnProperty } from '../../utils/object.js';\nimport { createEmptyMap, createMap } from '../../utils/map.js';\nvar name = 'simplify';\nvar dependencies = ['config', 'typed', 'parse', 'add', 'subtract', 'multiply', 'divide', 'pow', 'isZero', 'equal', 'resolve', 'simplifyCore', '?fraction', '?bignumber', 'mathWithTransform', 'matrix', 'AccessorNode', 'ArrayNode', 'ConstantNode', 'FunctionNode', 'IndexNode', 'ObjectNode', 'OperatorNode', 'ParenthesisNode', 'SymbolNode'];\nexport var createSimplify = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    config,\n    typed,\n    parse,\n    add,\n    subtract,\n    multiply,\n    divide,\n    pow,\n    isZero,\n    equal,\n    resolve,\n    simplifyCore,\n    fraction,\n    bignumber,\n    mathWithTransform,\n    matrix,\n    AccessorNode,\n    ArrayNode,\n    ConstantNode,\n    FunctionNode,\n    IndexNode,\n    ObjectNode,\n    OperatorNode,\n    ParenthesisNode,\n    SymbolNode\n  } = _ref;\n  var simplifyConstant = createSimplifyConstant({\n    typed,\n    config,\n    mathWithTransform,\n    matrix,\n    fraction,\n    bignumber,\n    AccessorNode,\n    ArrayNode,\n    ConstantNode,\n    FunctionNode,\n    IndexNode,\n    ObjectNode,\n    OperatorNode,\n    SymbolNode\n  });\n  var {\n    hasProperty,\n    isCommutative,\n    isAssociative,\n    mergeContext,\n    flatten,\n    unflattenr,\n    unflattenl,\n    createMakeNodeFunction,\n    defaultContext,\n    realContext,\n    positiveContext\n  } = createUtil({\n    FunctionNode,\n    OperatorNode,\n    SymbolNode\n  });\n  /**\n   * Simplify an expression tree.\n   *\n   * A list of rules are applied to an expression, repeating over the list until\n   * no further changes are made.\n   * It's possible to pass a custom set of rules to the function as second\n   * argument. A rule can be specified as an object, string, or function:\n   *\n   *     const rules = [\n   *       { l: 'n1*n3 + n2*n3', r: '(n1+n2)*n3' },\n   *       'n1*n3 + n2*n3 -> (n1+n2)*n3',\n   *       function (node) {\n   *         // ... return a new node or return the node unchanged\n   *         return node\n   *       }\n   *     ]\n   *\n   * String and object rules consist of a left and right pattern. The left is\n   * used to match against the expression and the right determines what matches\n   * are replaced with. The main difference between a pattern and a normal\n   * expression is that variables starting with the following characters are\n   * interpreted as wildcards:\n   *\n   * - 'n' - matches any Node\n   * - 'c' - matches any ConstantNode\n   * - 'v' - matches any Node that is not a ConstantNode\n   *\n   * The default list of rules is exposed on the function as `simplify.rules`\n   * and can be used as a basis to built a set of custom rules.\n   *\n   * To specify a rule as a string, separate the left and right pattern by '->'\n   * When specifying a rule as an object, the following keys are meaningful:\n   * - l - the left pattern\n   * - r - the right pattern\n   * - s - in lieu of l and r, the string form that is broken at -> to give them\n   * - repeat - whether to repeat this rule until the expression stabilizes\n   * - assuming - gives a context object, as in the 'context' option to\n   *     simplify. Every property in the context object must match the current\n   *     context in order, or else the rule will not be applied.\n   * - imposeContext - gives a context object, as in the 'context' option to\n   *     simplify. Any settings specified will override the incoming context\n   *     for all matches of this rule.\n   *\n   * For more details on the theory, see:\n   *\n   * - [Strategies for simplifying math expressions (Stackoverflow)](https://stackoverflow.com/questions/7540227/strategies-for-simplifying-math-expressions)\n   * - [Symbolic computation - Simplification (Wikipedia)](https://en.wikipedia.org/wiki/Symbolic_computation#Simplification)\n   *\n   *  An optional `options` argument can be passed as last argument of `simplify`.\n   *  Currently available options (defaults in parentheses):\n   *  - `consoleDebug` (false): whether to write the expression being simplified\n   *    and any changes to it, along with the rule responsible, to console\n   *  - `context` (simplify.defaultContext): an object giving properties of\n   *    each operator, which determine what simplifications are allowed. The\n   *    currently meaningful properties are commutative, associative,\n   *    total (whether the operation is defined for all arguments), and\n   *    trivial (whether the operation applied to a single argument leaves\n   *    that argument unchanged). The default context is very permissive and\n   *    allows almost all simplifications. Only properties differing from\n   *    the default need to be specified; the default context is used as a\n   *    fallback. Additional contexts `simplify.realContext` and\n   *    `simplify.positiveContext` are supplied to cause simplify to perform\n   *    just simplifications guaranteed to preserve all values of the expression\n   *    assuming all variables and subexpressions are real numbers or\n   *    positive real numbers, respectively. (Note that these are in some cases\n   *    more restrictive than the default context; for example, the default\n   *    context will allow `x/x` to simplify to 1, whereas\n   *    `simplify.realContext` will not, as `0/0` is not equal to 1.)\n   *  - `exactFractions` (true): whether to try to convert all constants to\n   *    exact rational numbers.\n   *  - `fractionsLimit` (10000): when `exactFractions` is true, constants will\n   *    be expressed as fractions only when both numerator and denominator\n   *    are smaller than `fractionsLimit`.\n   *\n   * Syntax:\n   *\n   *     simplify(expr)\n   *     simplify(expr, rules)\n   *     simplify(expr, rules)\n   *     simplify(expr, rules, scope)\n   *     simplify(expr, rules, scope, options)\n   *     simplify(expr, scope)\n   *     simplify(expr, scope, options)\n   *\n   * Examples:\n   *\n   *     math.simplify('2 * 1 * x ^ (2 - 1)')      // Node \"2 * x\"\n   *     math.simplify('2 * 3 * x', {x: 4})        // Node \"24\"\n   *     const f = math.parse('2 * 1 * x ^ (2 - 1)')\n   *     math.simplify(f)                          // Node \"2 * x\"\n   *     math.simplify('0.4 * x', {}, {exactFractions: true})  // Node \"x * 2 / 5\"\n   *     math.simplify('0.4 * x', {}, {exactFractions: false}) // Node \"0.4 * x\"\n   *\n   * See also:\n   *\n   *     simplifyCore, derivative, evaluate, parse, rationalize, resolve\n   *\n   * @param {Node | string} expr\n   *            The expression to be simplified\n   * @param {Array<{l:string, r: string} | string | function>} [rules]\n   *            Optional list with custom rules\n   * @return {Node} Returns the simplified form of `expr`\n   */\n\n  var simplify = typed('simplify', {\n    string: function string(expr) {\n      return this(parse(expr), this.rules, createEmptyMap(), {});\n    },\n    'string, Map | Object': function stringMapObject(expr, scope) {\n      return this(parse(expr), this.rules, scope, {});\n    },\n    'string, Map | Object, Object': function stringMapObjectObject(expr, scope, options) {\n      return this(parse(expr), this.rules, scope, options);\n    },\n    'string, Array': function stringArray(expr, rules) {\n      return this(parse(expr), rules, createEmptyMap(), {});\n    },\n    'string, Array, Map | Object': function stringArrayMapObject(expr, rules, scope) {\n      return this(parse(expr), rules, scope, {});\n    },\n    'string, Array, Map | Object, Object': function stringArrayMapObjectObject(expr, rules, scope, options) {\n      return this(parse(expr), rules, scope, options);\n    },\n    'Node, Map | Object': function NodeMapObject(expr, scope) {\n      return this(expr, this.rules, scope, {});\n    },\n    'Node, Map | Object, Object': function NodeMapObjectObject(expr, scope, options) {\n      return this(expr, this.rules, scope, options);\n    },\n    Node: function Node(expr) {\n      return this(expr, this.rules, createEmptyMap(), {});\n    },\n    'Node, Array': function NodeArray(expr, rules) {\n      return this(expr, rules, createEmptyMap(), {});\n    },\n    'Node, Array, Map | Object': function NodeArrayMapObject(expr, rules, scope) {\n      return this(expr, rules, scope, {});\n    },\n    'Node, Array, Object, Object': function NodeArrayObjectObject(expr, rules, scope, options) {\n      return this(expr, rules, createMap(scope), options);\n    },\n    'Node, Array, Map, Object': function NodeArrayMapObject(expr, rules, scope, options) {\n      var debug = options.consoleDebug;\n      rules = _buildRules(rules, options.context);\n      var res = resolve(expr, scope);\n      res = removeParens(res);\n      var visited = {};\n      var str = res.toString({\n        parenthesis: 'all'\n      });\n      while (!visited[str]) {\n        visited[str] = true;\n        _lastsym = 0; // counter for placeholder symbols\n\n        var laststr = str;\n        if (debug) console.log('Working on: ', str);\n        for (var i = 0; i < rules.length; i++) {\n          var rulestr = '';\n          if (typeof rules[i] === 'function') {\n            res = rules[i](res, options);\n            if (debug) rulestr = rules[i].name;\n          } else {\n            flatten(res, options.context);\n            res = applyRule(res, rules[i], options.context);\n            if (debug) {\n              rulestr = \"\".concat(rules[i].l.toString(), \" -> \").concat(rules[i].r.toString());\n            }\n          }\n          if (debug) {\n            var newstr = res.toString({\n              parenthesis: 'all'\n            });\n            if (newstr !== laststr) {\n              console.log('Applying', rulestr, 'produced', newstr);\n              laststr = newstr;\n            }\n          }\n          /* Use left-heavy binary tree internally,\n           * since custom rule functions may expect it\n           */\n\n          unflattenl(res, options.context);\n        }\n        str = res.toString({\n          parenthesis: 'all'\n        });\n      }\n      return res;\n    }\n  });\n  simplify.defaultContext = defaultContext;\n  simplify.realContext = realContext;\n  simplify.positiveContext = positiveContext;\n  function removeParens(node) {\n    return node.transform(function (node, path, parent) {\n      return isParenthesisNode(node) ? removeParens(node.content) : node;\n    });\n  } // All constants that are allowed in rules\n\n  var SUPPORTED_CONSTANTS = {\n    true: true,\n    false: true,\n    e: true,\n    i: true,\n    Infinity: true,\n    LN2: true,\n    LN10: true,\n    LOG2E: true,\n    LOG10E: true,\n    NaN: true,\n    phi: true,\n    pi: true,\n    SQRT1_2: true,\n    SQRT2: true,\n    tau: true // null: false,\n    // undefined: false,\n    // version: false,\n  }; // Array of strings, used to build the ruleSet.\n  // Each l (left side) and r (right side) are parsed by\n  // the expression parser into a node tree.\n  // Left hand sides are matched to subtrees within the\n  // expression to be parsed and replaced with the right\n  // hand side.\n  // TODO: Add support for constraints on constants (either in the form of a '=' expression or a callback [callback allows things like comparing symbols alphabetically])\n  // To evaluate lhs constants for rhs constants, use: { l: 'c1+c2', r: 'c3', evaluate: 'c3 = c1 + c2' }. Multiple assignments are separated by ';' in block format.\n  // It is possible to get into an infinite loop with conflicting rules\n\n  simplify.rules = [simplifyCore,\n  // { l: 'n+0', r: 'n' },     // simplifyCore\n  // { l: 'n^0', r: '1' },     // simplifyCore\n  // { l: '0*n', r: '0' },     // simplifyCore\n  // { l: 'n/n', r: '1'},      // simplifyCore\n  // { l: 'n^1', r: 'n' },     // simplifyCore\n  // { l: '+n1', r:'n1' },     // simplifyCore\n  // { l: 'n--n1', r:'n+n1' }, // simplifyCore\n  {\n    l: 'log(e)',\n    r: '1'\n  },\n  // temporary rules\n  // Note initially we tend constants to the right because like-term\n  // collection prefers the left, and we would rather collect nonconstants\n  {\n    s: 'n-n1 -> n+-n1',\n    // temporarily replace 'subtract' so we can further flatten the 'add' operator\n    assuming: {\n      subtract: {\n        total: true\n      }\n    }\n  }, {\n    s: 'n-n -> 0',\n    // partial alternative when we can't always subtract\n    assuming: {\n      subtract: {\n        total: false\n      }\n    }\n  }, {\n    s: '-(c*v) -> v * (-c)',\n    // make non-constant terms positive\n    assuming: {\n      multiply: {\n        commutative: true\n      },\n      subtract: {\n        total: true\n      }\n    }\n  }, {\n    s: '-(c*v) -> (-c) * v',\n    // non-commutative version, part 1\n    assuming: {\n      multiply: {\n        commutative: false\n      },\n      subtract: {\n        total: true\n      }\n    }\n  }, {\n    s: '-(v*c) -> v * (-c)',\n    // non-commutative version, part 2\n    assuming: {\n      multiply: {\n        commutative: false\n      },\n      subtract: {\n        total: true\n      }\n    }\n  }, {\n    l: '-(n1/n2)',\n    r: '-n1/n2'\n  }, {\n    l: '-v',\n    r: 'v * (-1)'\n  },\n  // finish making non-constant terms positive\n  {\n    l: '(n1 + n2)*(-1)',\n    r: 'n1*(-1) + n2*(-1)',\n    repeat: true\n  },\n  // expand negations to achieve as much sign cancellation as possible\n  {\n    l: 'n/n1^n2',\n    r: 'n*n1^-n2'\n  },\n  // temporarily replace 'divide' so we can further flatten the 'multiply' operator\n  {\n    l: 'n/n1',\n    r: 'n*n1^-1'\n  }, {\n    s: '(n1*n2)^n3 -> n1^n3 * n2^n3',\n    assuming: {\n      multiply: {\n        commutative: true\n      }\n    }\n  }, {\n    s: '(n1*n2)^(-1) -> n2^(-1) * n1^(-1)',\n    assuming: {\n      multiply: {\n        commutative: false\n      }\n    }\n  },\n  // expand nested exponentiation\n  {\n    s: '(n ^ n1) ^ n2 -> n ^ (n1 * n2)',\n    assuming: {\n      divide: {\n        total: true\n      }\n    } // 1/(1/n) = n needs 1/n to exist\n  },\n  // collect like factors; into a sum, only do this for nonconstants\n  {\n    l: ' v   * ( v   * n1 + n2)',\n    r: 'v^2       * n1 +  v   * n2'\n  }, {\n    s: ' v   * (v^n4 * n1 + n2)   ->  v^(1+n4)  * n1 +  v   * n2',\n    assuming: {\n      divide: {\n        total: true\n      }\n    } // v*1/v = v^(1+-1) needs 1/v\n  }, {\n    s: 'v^n3 * ( v   * n1 + n2)   ->  v^(n3+1)  * n1 + v^n3 * n2',\n    assuming: {\n      divide: {\n        total: true\n      }\n    }\n  }, {\n    s: 'v^n3 * (v^n4 * n1 + n2)   ->  v^(n3+n4) * n1 + v^n3 * n2',\n    assuming: {\n      divide: {\n        total: true\n      }\n    }\n  }, {\n    l: 'n*n',\n    r: 'n^2'\n  }, {\n    s: 'n * n^n1 -> n^(n1+1)',\n    assuming: {\n      divide: {\n        total: true\n      }\n    } // n*1/n = n^(-1+1) needs 1/n\n  }, {\n    s: 'n^n1 * n^n2 -> n^(n1+n2)',\n    assuming: {\n      divide: {\n        total: true\n      }\n    } // ditto for n^2*1/n^2\n  },\n  // Unfortunately, to deal with more complicated cancellations, it\n  // becomes necessary to simplify constants twice per pass. It's not\n  // terribly expensive compared to matching rules, so this should not\n  // pose a performance problem.\n  simplifyConstant,\n  // First: before collecting like terms\n  // collect like terms\n  {\n    s: 'n+n -> 2*n',\n    assuming: {\n      add: {\n        total: true\n      }\n    } // 2 = 1 + 1 needs to exist\n  }, {\n    l: 'n+-n',\n    r: '0'\n  }, {\n    l: 'v*n + v',\n    r: 'v*(n+1)'\n  },\n  // NOTE: leftmost position is special:\n  {\n    l: 'n3*n1 + n3*n2',\n    r: 'n3*(n1+n2)'\n  },\n  // All sub-monomials tried there.\n  {\n    l: 'n3^(-n4)*n1 +   n3  * n2',\n    r: 'n3^(-n4)*(n1 + n3^(n4+1) *n2)'\n  }, {\n    l: 'n3^(-n4)*n1 + n3^n5 * n2',\n    r: 'n3^(-n4)*(n1 + n3^(n4+n5)*n2)'\n  }, {\n    s: 'n*v + v -> (n+1)*v',\n    // noncommutative additional cases\n    assuming: {\n      multiply: {\n        commutative: false\n      }\n    }\n  }, {\n    s: 'n1*n3 + n2*n3 -> (n1+n2)*n3',\n    assuming: {\n      multiply: {\n        commutative: false\n      }\n    }\n  }, {\n    s: 'n1*n3^(-n4) + n2 * n3    -> (n1 + n2*n3^(n4 +  1))*n3^(-n4)',\n    assuming: {\n      multiply: {\n        commutative: false\n      }\n    }\n  }, {\n    s: 'n1*n3^(-n4) + n2 * n3^n5 -> (n1 + n2*n3^(n4 + n5))*n3^(-n4)',\n    assuming: {\n      multiply: {\n        commutative: false\n      }\n    }\n  }, {\n    l: 'n*c + c',\n    r: '(n+1)*c'\n  }, {\n    s: 'c*n + c -> c*(n+1)',\n    assuming: {\n      multiply: {\n        commutative: false\n      }\n    }\n  }, simplifyConstant,\n  // Second: before returning expressions to \"standard form\"\n  // make factors positive (and undo 'make non-constant terms positive')\n  {\n    s: '(-n)*n1 -> -(n*n1)',\n    assuming: {\n      subtract: {\n        total: true\n      }\n    }\n  }, {\n    s: 'n1*(-n) -> -(n1*n)',\n    // in case * non-commutative\n    assuming: {\n      subtract: {\n        total: true\n      },\n      multiply: {\n        commutative: false\n      }\n    }\n  },\n  // final ordering of constants\n  {\n    s: 'c+v -> v+c',\n    assuming: {\n      add: {\n        commutative: true\n      }\n    },\n    imposeContext: {\n      add: {\n        commutative: false\n      }\n    }\n  }, {\n    s: 'v*c -> c*v',\n    assuming: {\n      multiply: {\n        commutative: true\n      }\n    },\n    imposeContext: {\n      multiply: {\n        commutative: false\n      }\n    }\n  },\n  // undo temporary rules\n  // { l: '(-1) * n', r: '-n' }, // #811 added test which proved this is redundant\n  {\n    l: 'n+-n1',\n    r: 'n-n1'\n  },\n  // undo replace 'subtract'\n  {\n    s: 'n*(n1^-1) -> n/n1',\n    // undo replace 'divide'; for * commutative\n    assuming: {\n      multiply: {\n        commutative: true\n      }\n    } // o.w. / not conventional\n  }, {\n    s: 'n*n1^-n2 -> n/n1^n2',\n    assuming: {\n      multiply: {\n        commutative: true\n      }\n    } // o.w. / not conventional\n  }, {\n    s: 'n^-1 -> 1/n',\n    assuming: {\n      multiply: {\n        commutative: true\n      }\n    } // o.w. / not conventional\n  }, {\n    l: 'n^1',\n    r: 'n'\n  },\n  // can be produced by power cancellation\n  {\n    s: 'n*(n1/n2) -> (n*n1)/n2',\n    // '*' before '/'\n    assuming: {\n      multiply: {\n        associative: true\n      }\n    }\n  }, {\n    s: 'n-(n1+n2) -> n-n1-n2',\n    // '-' before '+'\n    assuming: {\n      addition: {\n        associative: true,\n        commutative: true\n      }\n    }\n  },\n  // { l: '(n1/n2)/n3', r: 'n1/(n2*n3)' },\n  // { l: '(n*n1)/(n*n2)', r: 'n1/n2' },\n  // simplifyConstant can leave an extra factor of 1, which can always\n  // be eliminated, since the identity always commutes\n  {\n    l: '1*n',\n    r: 'n',\n    imposeContext: {\n      multiply: {\n        commutative: true\n      }\n    }\n  }, {\n    s: 'n1/(n2/n3) -> (n1*n3)/n2',\n    assuming: {\n      multiply: {\n        associative: true\n      }\n    }\n  }, {\n    l: 'n1/(-n2)',\n    r: '-n1/n2'\n  }];\n  /**\n   * Takes any rule object as allowed by the specification in simplify\n   * and puts it in a standard form used by applyRule\n   */\n\n  function _canonicalizeRule(ruleObject, context) {\n    var newRule = {};\n    if (ruleObject.s) {\n      var lr = ruleObject.s.split('->');\n      if (lr.length === 2) {\n        newRule.l = lr[0];\n        newRule.r = lr[1];\n      } else {\n        throw SyntaxError('Could not parse rule: ' + ruleObject.s);\n      }\n    } else {\n      newRule.l = ruleObject.l;\n      newRule.r = ruleObject.r;\n    }\n    newRule.l = removeParens(parse(newRule.l));\n    newRule.r = removeParens(parse(newRule.r));\n    for (var prop of ['imposeContext', 'repeat', 'assuming']) {\n      if (prop in ruleObject) {\n        newRule[prop] = ruleObject[prop];\n      }\n    }\n    if (ruleObject.evaluate) {\n      newRule.evaluate = parse(ruleObject.evaluate);\n    }\n    if (isAssociative(newRule.l, context)) {\n      var makeNode = createMakeNodeFunction(newRule.l);\n      var expandsym = _getExpandPlaceholderSymbol();\n      newRule.expanded = {};\n      newRule.expanded.l = makeNode([newRule.l.clone(), expandsym]); // Push the expandsym into the deepest possible branch.\n      // This helps to match the newRule against nodes returned from getSplits() later on.\n\n      flatten(newRule.expanded.l, context);\n      unflattenr(newRule.expanded.l, context);\n      newRule.expanded.r = makeNode([newRule.r, expandsym]);\n    }\n    return newRule;\n  }\n  /**\n   * Parse the string array of rules into nodes\n   *\n   * Example syntax for rules:\n   *\n   * Position constants to the left in a product:\n   * { l: 'n1 * c1', r: 'c1 * n1' }\n   * n1 is any Node, and c1 is a ConstantNode.\n   *\n   * Apply difference of squares formula:\n   * { l: '(n1 - n2) * (n1 + n2)', r: 'n1^2 - n2^2' }\n   * n1, n2 mean any Node.\n   *\n   * Short hand notation:\n   * 'n1 * c1 -> c1 * n1'\n   */\n\n  function _buildRules(rules, context) {\n    // Array of rules to be used to simplify expressions\n    var ruleSet = [];\n    for (var i = 0; i < rules.length; i++) {\n      var rule = rules[i];\n      var newRule = void 0;\n      var ruleType = typeof rule;\n      switch (ruleType) {\n        case 'string':\n          rule = {\n            s: rule\n          };\n\n        /* falls through */\n\n        case 'object':\n          newRule = _canonicalizeRule(rule, context);\n          break;\n        case 'function':\n          newRule = rule;\n          break;\n        default:\n          throw TypeError('Unsupported type of rule: ' + ruleType);\n      } // console.log('Adding rule: ' + rules[i])\n      // console.log(newRule)\n\n      ruleSet.push(newRule);\n    }\n    return ruleSet;\n  }\n  var _lastsym = 0;\n  function _getExpandPlaceholderSymbol() {\n    return new SymbolNode('_p' + _lastsym++);\n  }\n  function mapRule(nodes, rule, context) {\n    var resNodes = nodes;\n    if (nodes) {\n      for (var i = 0; i < nodes.length; ++i) {\n        var newNode = applyRule(nodes[i], rule, context);\n        if (newNode !== nodes[i]) {\n          if (resNodes === nodes) {\n            resNodes = nodes.slice();\n          }\n          resNodes[i] = newNode;\n        }\n      }\n    }\n    return resNodes;\n  }\n  /**\n   * Returns a simplfied form of node, or the original node if no simplification was possible.\n   *\n   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node\n   * @param  {Object | Function} rule\n   * @param  {Object} context -- information about assumed properties of operators\n   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} The simplified form of `expr`, or the original node if no simplification was possible.\n   */\n\n  function applyRule(node, rule, context) {\n    //    console.log('Entering applyRule(\"', rule.l.toString({parenthesis:'all'}), '->', rule.r.toString({parenthesis:'all'}), '\",', node.toString({parenthesis:'all'}),')')\n    // check that the assumptions for this rule are satisfied by the current\n    // context:\n    if (rule.assuming) {\n      for (var symbol in rule.assuming) {\n        for (var property in rule.assuming[symbol]) {\n          if (hasProperty(symbol, property, context) !== rule.assuming[symbol][property]) {\n            return node;\n          }\n        }\n      }\n    }\n    var mergedContext = mergeContext(rule.imposeContext, context); // Do not clone node unless we find a match\n\n    var res = node; // First replace our child nodes with their simplified versions\n    // If a child could not be simplified, applying the rule to it\n    // will have no effect since the node is returned unchanged\n\n    if (res instanceof OperatorNode || res instanceof FunctionNode) {\n      var newArgs = mapRule(res.args, rule, context);\n      if (newArgs !== res.args) {\n        res = res.clone();\n        res.args = newArgs;\n      }\n    } else if (res instanceof ParenthesisNode) {\n      if (res.content) {\n        var newContent = applyRule(res.content, rule, context);\n        if (newContent !== res.content) {\n          res = new ParenthesisNode(newContent);\n        }\n      }\n    } else if (res instanceof ArrayNode) {\n      var newItems = mapRule(res.items, rule, context);\n      if (newItems !== res.items) {\n        res = new ArrayNode(newItems);\n      }\n    } else if (res instanceof AccessorNode) {\n      var newObj = res.object;\n      if (res.object) {\n        newObj = applyRule(res.object, rule, context);\n      }\n      var newIndex = res.index;\n      if (res.index) {\n        newIndex = applyRule(res.index, rule, context);\n      }\n      if (newObj !== res.object || newIndex !== res.index) {\n        res = new AccessorNode(newObj, newIndex);\n      }\n    } else if (res instanceof IndexNode) {\n      var newDims = mapRule(res.dimensions, rule, context);\n      if (newDims !== res.dimensions) {\n        res = new IndexNode(newDims);\n      }\n    } else if (res instanceof ObjectNode) {\n      var changed = false;\n      var newProps = {};\n      for (var prop in res.properties) {\n        newProps[prop] = applyRule(res.properties[prop], rule, context);\n        if (newProps[prop] !== res.properties[prop]) {\n          changed = true;\n        }\n      }\n      if (changed) {\n        res = new ObjectNode(newProps);\n      }\n    } // Try to match a rule against this node\n\n    var repl = rule.r;\n    var matches = _ruleMatch(rule.l, res, mergedContext)[0]; // If the rule is associative operator, we can try matching it while allowing additional terms.\n    // This allows us to match rules like 'n+n' to the expression '(1+x)+x' or even 'x+1+x' if the operator is commutative.\n\n    if (!matches && rule.expanded) {\n      repl = rule.expanded.r;\n      matches = _ruleMatch(rule.expanded.l, res, mergedContext)[0];\n    }\n    if (matches) {\n      // const before = res.toString({parenthesis: 'all'})\n      // Create a new node by cloning the rhs of the matched rule\n      // we keep any implicit multiplication state if relevant\n      var implicit = res.implicit;\n      res = repl.clone();\n      if (implicit && 'implicit' in repl) {\n        res.implicit = true;\n      } // Replace placeholders with their respective nodes without traversing deeper into the replaced nodes\n\n      res = res.transform(function (node) {\n        if (node.isSymbolNode && hasOwnProperty(matches.placeholders, node.name)) {\n          return matches.placeholders[node.name].clone();\n        } else {\n          return node;\n        }\n      }); // const after = res.toString({parenthesis: 'all'})\n      // console.log('Simplified ' + before + ' to ' + after)\n    }\n\n    if (rule.repeat && res !== node) {\n      res = applyRule(res, rule, context);\n    }\n    return res;\n  }\n  /**\n   * Get (binary) combinations of a flattened binary node\n   * e.g. +(node1, node2, node3) -> [\n   *        +(node1,  +(node2, node3)),\n   *        +(node2,  +(node1, node3)),\n   *        +(node3,  +(node1, node2))]\n   *\n   */\n\n  function getSplits(node, context) {\n    var res = [];\n    var right, rightArgs;\n    var makeNode = createMakeNodeFunction(node);\n    if (isCommutative(node, context)) {\n      for (var i = 0; i < node.args.length; i++) {\n        rightArgs = node.args.slice(0);\n        rightArgs.splice(i, 1);\n        right = rightArgs.length === 1 ? rightArgs[0] : makeNode(rightArgs);\n        res.push(makeNode([node.args[i], right]));\n      }\n    } else {\n      // Keep order, but try all parenthesizations\n      for (var _i = 1; _i < node.args.length; _i++) {\n        var left = node.args[0];\n        if (_i > 1) {\n          left = makeNode(node.args.slice(0, _i));\n        }\n        rightArgs = node.args.slice(_i);\n        right = rightArgs.length === 1 ? rightArgs[0] : makeNode(rightArgs);\n        res.push(makeNode([left, right]));\n      }\n    }\n    return res;\n  }\n  /**\n   * Returns the set union of two match-placeholders or null if there is a conflict.\n   */\n\n  function mergeMatch(match1, match2) {\n    var res = {\n      placeholders: {}\n    }; // Some matches may not have placeholders; this is OK\n\n    if (!match1.placeholders && !match2.placeholders) {\n      return res;\n    } else if (!match1.placeholders) {\n      return match2;\n    } else if (!match2.placeholders) {\n      return match1;\n    } // Placeholders with the same key must match exactly\n\n    for (var key in match1.placeholders) {\n      if (hasOwnProperty(match1.placeholders, key)) {\n        res.placeholders[key] = match1.placeholders[key];\n        if (hasOwnProperty(match2.placeholders, key)) {\n          if (!_exactMatch(match1.placeholders[key], match2.placeholders[key])) {\n            return null;\n          }\n        }\n      }\n    }\n    for (var _key in match2.placeholders) {\n      if (hasOwnProperty(match2.placeholders, _key)) {\n        res.placeholders[_key] = match2.placeholders[_key];\n      }\n    }\n    return res;\n  }\n  /**\n   * Combine two lists of matches by applying mergeMatch to the cartesian product of two lists of matches.\n   * Each list represents matches found in one child of a node.\n   */\n\n  function combineChildMatches(list1, list2) {\n    var res = [];\n    if (list1.length === 0 || list2.length === 0) {\n      return res;\n    }\n    var merged;\n    for (var i1 = 0; i1 < list1.length; i1++) {\n      for (var i2 = 0; i2 < list2.length; i2++) {\n        merged = mergeMatch(list1[i1], list2[i2]);\n        if (merged) {\n          res.push(merged);\n        }\n      }\n    }\n    return res;\n  }\n  /**\n   * Combine multiple lists of matches by applying mergeMatch to the cartesian product of two lists of matches.\n   * Each list represents matches found in one child of a node.\n   * Returns a list of unique matches.\n   */\n\n  function mergeChildMatches(childMatches) {\n    if (childMatches.length === 0) {\n      return childMatches;\n    }\n    var sets = childMatches.reduce(combineChildMatches);\n    var uniqueSets = [];\n    var unique = {};\n    for (var i = 0; i < sets.length; i++) {\n      var s = JSON.stringify(sets[i]);\n      if (!unique[s]) {\n        unique[s] = true;\n        uniqueSets.push(sets[i]);\n      }\n    }\n    return uniqueSets;\n  }\n  /**\n   * Determines whether node matches rule.\n   *\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} rule\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node\n   * @param {Object} context -- provides assumed properties of operators\n   * @param {Boolean} isSplit -- whether we are in process of splitting an\n   *                    n-ary operator node into possible binary combinations.\n   *                    Defaults to false.\n   * @return {Object} Information about the match, if it exists.\n   */\n\n  function _ruleMatch(rule, node, context, isSplit) {\n    //    console.log('Entering _ruleMatch(' + JSON.stringify(rule) + ', ' + JSON.stringify(node) + ')')\n    //    console.log('rule = ' + rule)\n    //    console.log('node = ' + node)\n    //    console.log('Entering _ruleMatch(', rule.toString({parenthesis:'all'}), ', ', node.toString({parenthesis:'all'}), ', ', context, ')')\n    var res = [{\n      placeholders: {}\n    }];\n    if (rule instanceof OperatorNode && node instanceof OperatorNode || rule instanceof FunctionNode && node instanceof FunctionNode) {\n      // If the rule is an OperatorNode or a FunctionNode, then node must match exactly\n      if (rule instanceof OperatorNode) {\n        if (rule.op !== node.op || rule.fn !== node.fn) {\n          return [];\n        }\n      } else if (rule instanceof FunctionNode) {\n        if (rule.name !== node.name) {\n          return [];\n        }\n      } // rule and node match. Search the children of rule and node.\n\n      if (node.args.length === 1 && rule.args.length === 1 || !isAssociative(node, context) && node.args.length === rule.args.length || isSplit) {\n        // Expect non-associative operators to match exactly,\n        // except in any order if operator is commutative\n        var childMatches = [];\n        for (var i = 0; i < rule.args.length; i++) {\n          var childMatch = _ruleMatch(rule.args[i], node.args[i], context);\n          if (childMatch.length === 0) {\n            // Child did not match, so stop searching immediately\n            break;\n          } // The child matched, so add the information returned from the child to our result\n\n          childMatches.push(childMatch);\n        }\n        if (childMatches.length !== rule.args.length) {\n          if (!isCommutative(node, context) ||\n          // exact match in order needed\n          rule.args.length === 1) {\n            // nothing to commute\n            return [];\n          }\n          if (rule.args.length > 2) {\n            /* Need to generate all permutations and try them.\n             * It's a bit complicated, and unlikely to come up since there\n             * are very few ternary or higher operators. So punt for now.\n             */\n            throw new Error('permuting >2 commutative non-associative rule arguments not yet implemented');\n          }\n          /* Exactly two arguments, try them reversed */\n\n          var leftMatch = _ruleMatch(rule.args[0], node.args[1], context);\n          if (leftMatch.length === 0) {\n            return [];\n          }\n          var rightMatch = _ruleMatch(rule.args[1], node.args[0], context);\n          if (rightMatch.length === 0) {\n            return [];\n          }\n          childMatches = [leftMatch, rightMatch];\n        }\n        res = mergeChildMatches(childMatches);\n      } else if (node.args.length >= 2 && rule.args.length === 2) {\n        // node is flattened, rule is not\n        // Associative operators/functions can be split in different ways so we check if the rule matches each\n        // them and return their union.\n        var splits = getSplits(node, context);\n        var splitMatches = [];\n        for (var _i2 = 0; _i2 < splits.length; _i2++) {\n          var matchSet = _ruleMatch(rule, splits[_i2], context, true); // recursing at the same tree depth here\n\n          splitMatches = splitMatches.concat(matchSet);\n        }\n        return splitMatches;\n      } else if (rule.args.length > 2) {\n        throw Error('Unexpected non-binary associative function: ' + rule.toString());\n      } else {\n        // Incorrect number of arguments in rule and node, so no match\n        return [];\n      }\n    } else if (rule instanceof SymbolNode) {\n      // If the rule is a SymbolNode, then it carries a special meaning\n      // according to the first character of the symbol node name.\n      // c.* matches a ConstantNode\n      // n.* matches any node\n      if (rule.name.length === 0) {\n        throw new Error('Symbol in rule has 0 length...!?');\n      }\n      if (SUPPORTED_CONSTANTS[rule.name]) {\n        // built-in constant must match exactly\n        if (rule.name !== node.name) {\n          return [];\n        }\n      } else if (rule.name[0] === 'n' || rule.name.substring(0, 2) === '_p') {\n        // rule matches _anything_, so assign this node to the rule.name placeholder\n        // Assign node to the rule.name placeholder.\n        // Our parent will check for matches among placeholders.\n        res[0].placeholders[rule.name] = node;\n      } else if (rule.name[0] === 'v') {\n        // rule matches any variable thing (not a ConstantNode)\n        if (!isConstantNode(node)) {\n          res[0].placeholders[rule.name] = node;\n        } else {\n          // Mis-match: rule was expecting something other than a ConstantNode\n          return [];\n        }\n      } else if (rule.name[0] === 'c') {\n        // rule matches any ConstantNode\n        if (node instanceof ConstantNode) {\n          res[0].placeholders[rule.name] = node;\n        } else {\n          // Mis-match: rule was expecting a ConstantNode\n          return [];\n        }\n      } else {\n        throw new Error('Invalid symbol in rule: ' + rule.name);\n      }\n    } else if (rule instanceof ConstantNode) {\n      // Literal constant must match exactly\n      if (!equal(rule.value, node.value)) {\n        return [];\n      }\n    } else {\n      // Some other node was encountered which we aren't prepared for, so no match\n      return [];\n    } // It's a match!\n    // console.log('_ruleMatch(' + rule.toString() + ', ' + node.toString() + ') found a match')\n\n    return res;\n  }\n  /**\n   * Determines whether p and q (and all their children nodes) are identical.\n   *\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} p\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} q\n   * @return {Object} Information about the match, if it exists.\n   */\n\n  function _exactMatch(p, q) {\n    if (p instanceof ConstantNode && q instanceof ConstantNode) {\n      if (!equal(p.value, q.value)) {\n        return false;\n      }\n    } else if (p instanceof SymbolNode && q instanceof SymbolNode) {\n      if (p.name !== q.name) {\n        return false;\n      }\n    } else if (p instanceof OperatorNode && q instanceof OperatorNode || p instanceof FunctionNode && q instanceof FunctionNode) {\n      if (p instanceof OperatorNode) {\n        if (p.op !== q.op || p.fn !== q.fn) {\n          return false;\n        }\n      } else if (p instanceof FunctionNode) {\n        if (p.name !== q.name) {\n          return false;\n        }\n      }\n      if (p.args.length !== q.args.length) {\n        return false;\n      }\n      for (var i = 0; i < p.args.length; i++) {\n        if (!_exactMatch(p.args[i], q.args[i])) {\n          return false;\n        }\n      }\n    } else {\n      return false;\n    }\n    return true;\n  }\n  return simplify;\n});","map":{"version":3,"names":["isConstantNode","isParenthesisNode","factory","createUtil","createSimplifyConstant","hasOwnProperty","createEmptyMap","createMap","name","dependencies","createSimplify","_ref","config","typed","parse","add","subtract","multiply","divide","pow","isZero","equal","resolve","simplifyCore","fraction","bignumber","mathWithTransform","matrix","AccessorNode","ArrayNode","ConstantNode","FunctionNode","IndexNode","ObjectNode","OperatorNode","ParenthesisNode","SymbolNode","simplifyConstant","hasProperty","isCommutative","isAssociative","mergeContext","flatten","unflattenr","unflattenl","createMakeNodeFunction","defaultContext","realContext","positiveContext","simplify","string","expr","rules","stringMapObject","scope","stringMapObjectObject","options","stringArray","stringArrayMapObject","stringArrayMapObjectObject","NodeMapObject","NodeMapObjectObject","Node","NodeArray","NodeArrayMapObject","NodeArrayObjectObject","debug","consoleDebug","_buildRules","context","res","removeParens","visited","str","toString","parenthesis","_lastsym","laststr","console","log","i","length","rulestr","applyRule","concat","l","r","newstr","node","transform","path","parent","content","SUPPORTED_CONSTANTS","true","false","e","Infinity","LN2","LN10","LOG2E","LOG10E","NaN","phi","pi","SQRT1_2","SQRT2","tau","s","assuming","total","commutative","repeat","imposeContext","associative","addition","_canonicalizeRule","ruleObject","newRule","lr","split","SyntaxError","prop","evaluate","makeNode","expandsym","_getExpandPlaceholderSymbol","expanded","clone","ruleSet","rule","ruleType","TypeError","push","mapRule","nodes","resNodes","newNode","slice","symbol","property","mergedContext","newArgs","args","newContent","newItems","items","newObj","object","newIndex","index","newDims","dimensions","changed","newProps","properties","repl","matches","_ruleMatch","implicit","isSymbolNode","placeholders","getSplits","right","rightArgs","splice","_i","left","mergeMatch","match1","match2","key","_exactMatch","_key","combineChildMatches","list1","list2","merged","i1","i2","mergeChildMatches","childMatches","sets","reduce","uniqueSets","unique","JSON","stringify","isSplit","op","fn","childMatch","Error","leftMatch","rightMatch","splits","splitMatches","_i2","matchSet","substring","value","p","q"],"sources":["/Users/front-end-projects/websites/calculator-app/node_modules/mathjs/lib/esm/function/algebra/simplify.js"],"sourcesContent":["import { isConstantNode, isParenthesisNode } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nimport { createUtil } from './simplify/util.js';\nimport { createSimplifyConstant } from './simplify/simplifyConstant.js';\nimport { hasOwnProperty } from '../../utils/object.js';\nimport { createEmptyMap, createMap } from '../../utils/map.js';\nvar name = 'simplify';\nvar dependencies = ['config', 'typed', 'parse', 'add', 'subtract', 'multiply', 'divide', 'pow', 'isZero', 'equal', 'resolve', 'simplifyCore', '?fraction', '?bignumber', 'mathWithTransform', 'matrix', 'AccessorNode', 'ArrayNode', 'ConstantNode', 'FunctionNode', 'IndexNode', 'ObjectNode', 'OperatorNode', 'ParenthesisNode', 'SymbolNode'];\nexport var createSimplify = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    config,\n    typed,\n    parse,\n    add,\n    subtract,\n    multiply,\n    divide,\n    pow,\n    isZero,\n    equal,\n    resolve,\n    simplifyCore,\n    fraction,\n    bignumber,\n    mathWithTransform,\n    matrix,\n    AccessorNode,\n    ArrayNode,\n    ConstantNode,\n    FunctionNode,\n    IndexNode,\n    ObjectNode,\n    OperatorNode,\n    ParenthesisNode,\n    SymbolNode\n  } = _ref;\n  var simplifyConstant = createSimplifyConstant({\n    typed,\n    config,\n    mathWithTransform,\n    matrix,\n    fraction,\n    bignumber,\n    AccessorNode,\n    ArrayNode,\n    ConstantNode,\n    FunctionNode,\n    IndexNode,\n    ObjectNode,\n    OperatorNode,\n    SymbolNode\n  });\n  var {\n    hasProperty,\n    isCommutative,\n    isAssociative,\n    mergeContext,\n    flatten,\n    unflattenr,\n    unflattenl,\n    createMakeNodeFunction,\n    defaultContext,\n    realContext,\n    positiveContext\n  } = createUtil({\n    FunctionNode,\n    OperatorNode,\n    SymbolNode\n  });\n  /**\n   * Simplify an expression tree.\n   *\n   * A list of rules are applied to an expression, repeating over the list until\n   * no further changes are made.\n   * It's possible to pass a custom set of rules to the function as second\n   * argument. A rule can be specified as an object, string, or function:\n   *\n   *     const rules = [\n   *       { l: 'n1*n3 + n2*n3', r: '(n1+n2)*n3' },\n   *       'n1*n3 + n2*n3 -> (n1+n2)*n3',\n   *       function (node) {\n   *         // ... return a new node or return the node unchanged\n   *         return node\n   *       }\n   *     ]\n   *\n   * String and object rules consist of a left and right pattern. The left is\n   * used to match against the expression and the right determines what matches\n   * are replaced with. The main difference between a pattern and a normal\n   * expression is that variables starting with the following characters are\n   * interpreted as wildcards:\n   *\n   * - 'n' - matches any Node\n   * - 'c' - matches any ConstantNode\n   * - 'v' - matches any Node that is not a ConstantNode\n   *\n   * The default list of rules is exposed on the function as `simplify.rules`\n   * and can be used as a basis to built a set of custom rules.\n   *\n   * To specify a rule as a string, separate the left and right pattern by '->'\n   * When specifying a rule as an object, the following keys are meaningful:\n   * - l - the left pattern\n   * - r - the right pattern\n   * - s - in lieu of l and r, the string form that is broken at -> to give them\n   * - repeat - whether to repeat this rule until the expression stabilizes\n   * - assuming - gives a context object, as in the 'context' option to\n   *     simplify. Every property in the context object must match the current\n   *     context in order, or else the rule will not be applied.\n   * - imposeContext - gives a context object, as in the 'context' option to\n   *     simplify. Any settings specified will override the incoming context\n   *     for all matches of this rule.\n   *\n   * For more details on the theory, see:\n   *\n   * - [Strategies for simplifying math expressions (Stackoverflow)](https://stackoverflow.com/questions/7540227/strategies-for-simplifying-math-expressions)\n   * - [Symbolic computation - Simplification (Wikipedia)](https://en.wikipedia.org/wiki/Symbolic_computation#Simplification)\n   *\n   *  An optional `options` argument can be passed as last argument of `simplify`.\n   *  Currently available options (defaults in parentheses):\n   *  - `consoleDebug` (false): whether to write the expression being simplified\n   *    and any changes to it, along with the rule responsible, to console\n   *  - `context` (simplify.defaultContext): an object giving properties of\n   *    each operator, which determine what simplifications are allowed. The\n   *    currently meaningful properties are commutative, associative,\n   *    total (whether the operation is defined for all arguments), and\n   *    trivial (whether the operation applied to a single argument leaves\n   *    that argument unchanged). The default context is very permissive and\n   *    allows almost all simplifications. Only properties differing from\n   *    the default need to be specified; the default context is used as a\n   *    fallback. Additional contexts `simplify.realContext` and\n   *    `simplify.positiveContext` are supplied to cause simplify to perform\n   *    just simplifications guaranteed to preserve all values of the expression\n   *    assuming all variables and subexpressions are real numbers or\n   *    positive real numbers, respectively. (Note that these are in some cases\n   *    more restrictive than the default context; for example, the default\n   *    context will allow `x/x` to simplify to 1, whereas\n   *    `simplify.realContext` will not, as `0/0` is not equal to 1.)\n   *  - `exactFractions` (true): whether to try to convert all constants to\n   *    exact rational numbers.\n   *  - `fractionsLimit` (10000): when `exactFractions` is true, constants will\n   *    be expressed as fractions only when both numerator and denominator\n   *    are smaller than `fractionsLimit`.\n   *\n   * Syntax:\n   *\n   *     simplify(expr)\n   *     simplify(expr, rules)\n   *     simplify(expr, rules)\n   *     simplify(expr, rules, scope)\n   *     simplify(expr, rules, scope, options)\n   *     simplify(expr, scope)\n   *     simplify(expr, scope, options)\n   *\n   * Examples:\n   *\n   *     math.simplify('2 * 1 * x ^ (2 - 1)')      // Node \"2 * x\"\n   *     math.simplify('2 * 3 * x', {x: 4})        // Node \"24\"\n   *     const f = math.parse('2 * 1 * x ^ (2 - 1)')\n   *     math.simplify(f)                          // Node \"2 * x\"\n   *     math.simplify('0.4 * x', {}, {exactFractions: true})  // Node \"x * 2 / 5\"\n   *     math.simplify('0.4 * x', {}, {exactFractions: false}) // Node \"0.4 * x\"\n   *\n   * See also:\n   *\n   *     simplifyCore, derivative, evaluate, parse, rationalize, resolve\n   *\n   * @param {Node | string} expr\n   *            The expression to be simplified\n   * @param {Array<{l:string, r: string} | string | function>} [rules]\n   *            Optional list with custom rules\n   * @return {Node} Returns the simplified form of `expr`\n   */\n\n  var simplify = typed('simplify', {\n    string: function string(expr) {\n      return this(parse(expr), this.rules, createEmptyMap(), {});\n    },\n    'string, Map | Object': function stringMapObject(expr, scope) {\n      return this(parse(expr), this.rules, scope, {});\n    },\n    'string, Map | Object, Object': function stringMapObjectObject(expr, scope, options) {\n      return this(parse(expr), this.rules, scope, options);\n    },\n    'string, Array': function stringArray(expr, rules) {\n      return this(parse(expr), rules, createEmptyMap(), {});\n    },\n    'string, Array, Map | Object': function stringArrayMapObject(expr, rules, scope) {\n      return this(parse(expr), rules, scope, {});\n    },\n    'string, Array, Map | Object, Object': function stringArrayMapObjectObject(expr, rules, scope, options) {\n      return this(parse(expr), rules, scope, options);\n    },\n    'Node, Map | Object': function NodeMapObject(expr, scope) {\n      return this(expr, this.rules, scope, {});\n    },\n    'Node, Map | Object, Object': function NodeMapObjectObject(expr, scope, options) {\n      return this(expr, this.rules, scope, options);\n    },\n    Node: function Node(expr) {\n      return this(expr, this.rules, createEmptyMap(), {});\n    },\n    'Node, Array': function NodeArray(expr, rules) {\n      return this(expr, rules, createEmptyMap(), {});\n    },\n    'Node, Array, Map | Object': function NodeArrayMapObject(expr, rules, scope) {\n      return this(expr, rules, scope, {});\n    },\n    'Node, Array, Object, Object': function NodeArrayObjectObject(expr, rules, scope, options) {\n      return this(expr, rules, createMap(scope), options);\n    },\n    'Node, Array, Map, Object': function NodeArrayMapObject(expr, rules, scope, options) {\n      var debug = options.consoleDebug;\n      rules = _buildRules(rules, options.context);\n      var res = resolve(expr, scope);\n      res = removeParens(res);\n      var visited = {};\n      var str = res.toString({\n        parenthesis: 'all'\n      });\n\n      while (!visited[str]) {\n        visited[str] = true;\n        _lastsym = 0; // counter for placeholder symbols\n\n        var laststr = str;\n        if (debug) console.log('Working on: ', str);\n\n        for (var i = 0; i < rules.length; i++) {\n          var rulestr = '';\n\n          if (typeof rules[i] === 'function') {\n            res = rules[i](res, options);\n            if (debug) rulestr = rules[i].name;\n          } else {\n            flatten(res, options.context);\n            res = applyRule(res, rules[i], options.context);\n\n            if (debug) {\n              rulestr = \"\".concat(rules[i].l.toString(), \" -> \").concat(rules[i].r.toString());\n            }\n          }\n\n          if (debug) {\n            var newstr = res.toString({\n              parenthesis: 'all'\n            });\n\n            if (newstr !== laststr) {\n              console.log('Applying', rulestr, 'produced', newstr);\n              laststr = newstr;\n            }\n          }\n          /* Use left-heavy binary tree internally,\n           * since custom rule functions may expect it\n           */\n\n\n          unflattenl(res, options.context);\n        }\n\n        str = res.toString({\n          parenthesis: 'all'\n        });\n      }\n\n      return res;\n    }\n  });\n  simplify.defaultContext = defaultContext;\n  simplify.realContext = realContext;\n  simplify.positiveContext = positiveContext;\n\n  function removeParens(node) {\n    return node.transform(function (node, path, parent) {\n      return isParenthesisNode(node) ? removeParens(node.content) : node;\n    });\n  } // All constants that are allowed in rules\n\n\n  var SUPPORTED_CONSTANTS = {\n    true: true,\n    false: true,\n    e: true,\n    i: true,\n    Infinity: true,\n    LN2: true,\n    LN10: true,\n    LOG2E: true,\n    LOG10E: true,\n    NaN: true,\n    phi: true,\n    pi: true,\n    SQRT1_2: true,\n    SQRT2: true,\n    tau: true // null: false,\n    // undefined: false,\n    // version: false,\n\n  }; // Array of strings, used to build the ruleSet.\n  // Each l (left side) and r (right side) are parsed by\n  // the expression parser into a node tree.\n  // Left hand sides are matched to subtrees within the\n  // expression to be parsed and replaced with the right\n  // hand side.\n  // TODO: Add support for constraints on constants (either in the form of a '=' expression or a callback [callback allows things like comparing symbols alphabetically])\n  // To evaluate lhs constants for rhs constants, use: { l: 'c1+c2', r: 'c3', evaluate: 'c3 = c1 + c2' }. Multiple assignments are separated by ';' in block format.\n  // It is possible to get into an infinite loop with conflicting rules\n\n  simplify.rules = [simplifyCore, // { l: 'n+0', r: 'n' },     // simplifyCore\n  // { l: 'n^0', r: '1' },     // simplifyCore\n  // { l: '0*n', r: '0' },     // simplifyCore\n  // { l: 'n/n', r: '1'},      // simplifyCore\n  // { l: 'n^1', r: 'n' },     // simplifyCore\n  // { l: '+n1', r:'n1' },     // simplifyCore\n  // { l: 'n--n1', r:'n+n1' }, // simplifyCore\n  {\n    l: 'log(e)',\n    r: '1'\n  }, // temporary rules\n  // Note initially we tend constants to the right because like-term\n  // collection prefers the left, and we would rather collect nonconstants\n  {\n    s: 'n-n1 -> n+-n1',\n    // temporarily replace 'subtract' so we can further flatten the 'add' operator\n    assuming: {\n      subtract: {\n        total: true\n      }\n    }\n  }, {\n    s: 'n-n -> 0',\n    // partial alternative when we can't always subtract\n    assuming: {\n      subtract: {\n        total: false\n      }\n    }\n  }, {\n    s: '-(c*v) -> v * (-c)',\n    // make non-constant terms positive\n    assuming: {\n      multiply: {\n        commutative: true\n      },\n      subtract: {\n        total: true\n      }\n    }\n  }, {\n    s: '-(c*v) -> (-c) * v',\n    // non-commutative version, part 1\n    assuming: {\n      multiply: {\n        commutative: false\n      },\n      subtract: {\n        total: true\n      }\n    }\n  }, {\n    s: '-(v*c) -> v * (-c)',\n    // non-commutative version, part 2\n    assuming: {\n      multiply: {\n        commutative: false\n      },\n      subtract: {\n        total: true\n      }\n    }\n  }, {\n    l: '-(n1/n2)',\n    r: '-n1/n2'\n  }, {\n    l: '-v',\n    r: 'v * (-1)'\n  }, // finish making non-constant terms positive\n  {\n    l: '(n1 + n2)*(-1)',\n    r: 'n1*(-1) + n2*(-1)',\n    repeat: true\n  }, // expand negations to achieve as much sign cancellation as possible\n  {\n    l: 'n/n1^n2',\n    r: 'n*n1^-n2'\n  }, // temporarily replace 'divide' so we can further flatten the 'multiply' operator\n  {\n    l: 'n/n1',\n    r: 'n*n1^-1'\n  }, {\n    s: '(n1*n2)^n3 -> n1^n3 * n2^n3',\n    assuming: {\n      multiply: {\n        commutative: true\n      }\n    }\n  }, {\n    s: '(n1*n2)^(-1) -> n2^(-1) * n1^(-1)',\n    assuming: {\n      multiply: {\n        commutative: false\n      }\n    }\n  }, // expand nested exponentiation\n  {\n    s: '(n ^ n1) ^ n2 -> n ^ (n1 * n2)',\n    assuming: {\n      divide: {\n        total: true\n      }\n    } // 1/(1/n) = n needs 1/n to exist\n\n  }, // collect like factors; into a sum, only do this for nonconstants\n  {\n    l: ' v   * ( v   * n1 + n2)',\n    r: 'v^2       * n1 +  v   * n2'\n  }, {\n    s: ' v   * (v^n4 * n1 + n2)   ->  v^(1+n4)  * n1 +  v   * n2',\n    assuming: {\n      divide: {\n        total: true\n      }\n    } // v*1/v = v^(1+-1) needs 1/v\n\n  }, {\n    s: 'v^n3 * ( v   * n1 + n2)   ->  v^(n3+1)  * n1 + v^n3 * n2',\n    assuming: {\n      divide: {\n        total: true\n      }\n    }\n  }, {\n    s: 'v^n3 * (v^n4 * n1 + n2)   ->  v^(n3+n4) * n1 + v^n3 * n2',\n    assuming: {\n      divide: {\n        total: true\n      }\n    }\n  }, {\n    l: 'n*n',\n    r: 'n^2'\n  }, {\n    s: 'n * n^n1 -> n^(n1+1)',\n    assuming: {\n      divide: {\n        total: true\n      }\n    } // n*1/n = n^(-1+1) needs 1/n\n\n  }, {\n    s: 'n^n1 * n^n2 -> n^(n1+n2)',\n    assuming: {\n      divide: {\n        total: true\n      }\n    } // ditto for n^2*1/n^2\n\n  }, // Unfortunately, to deal with more complicated cancellations, it\n  // becomes necessary to simplify constants twice per pass. It's not\n  // terribly expensive compared to matching rules, so this should not\n  // pose a performance problem.\n  simplifyConstant, // First: before collecting like terms\n  // collect like terms\n  {\n    s: 'n+n -> 2*n',\n    assuming: {\n      add: {\n        total: true\n      }\n    } // 2 = 1 + 1 needs to exist\n\n  }, {\n    l: 'n+-n',\n    r: '0'\n  }, {\n    l: 'v*n + v',\n    r: 'v*(n+1)'\n  }, // NOTE: leftmost position is special:\n  {\n    l: 'n3*n1 + n3*n2',\n    r: 'n3*(n1+n2)'\n  }, // All sub-monomials tried there.\n  {\n    l: 'n3^(-n4)*n1 +   n3  * n2',\n    r: 'n3^(-n4)*(n1 + n3^(n4+1) *n2)'\n  }, {\n    l: 'n3^(-n4)*n1 + n3^n5 * n2',\n    r: 'n3^(-n4)*(n1 + n3^(n4+n5)*n2)'\n  }, {\n    s: 'n*v + v -> (n+1)*v',\n    // noncommutative additional cases\n    assuming: {\n      multiply: {\n        commutative: false\n      }\n    }\n  }, {\n    s: 'n1*n3 + n2*n3 -> (n1+n2)*n3',\n    assuming: {\n      multiply: {\n        commutative: false\n      }\n    }\n  }, {\n    s: 'n1*n3^(-n4) + n2 * n3    -> (n1 + n2*n3^(n4 +  1))*n3^(-n4)',\n    assuming: {\n      multiply: {\n        commutative: false\n      }\n    }\n  }, {\n    s: 'n1*n3^(-n4) + n2 * n3^n5 -> (n1 + n2*n3^(n4 + n5))*n3^(-n4)',\n    assuming: {\n      multiply: {\n        commutative: false\n      }\n    }\n  }, {\n    l: 'n*c + c',\n    r: '(n+1)*c'\n  }, {\n    s: 'c*n + c -> c*(n+1)',\n    assuming: {\n      multiply: {\n        commutative: false\n      }\n    }\n  }, simplifyConstant, // Second: before returning expressions to \"standard form\"\n  // make factors positive (and undo 'make non-constant terms positive')\n  {\n    s: '(-n)*n1 -> -(n*n1)',\n    assuming: {\n      subtract: {\n        total: true\n      }\n    }\n  }, {\n    s: 'n1*(-n) -> -(n1*n)',\n    // in case * non-commutative\n    assuming: {\n      subtract: {\n        total: true\n      },\n      multiply: {\n        commutative: false\n      }\n    }\n  }, // final ordering of constants\n  {\n    s: 'c+v -> v+c',\n    assuming: {\n      add: {\n        commutative: true\n      }\n    },\n    imposeContext: {\n      add: {\n        commutative: false\n      }\n    }\n  }, {\n    s: 'v*c -> c*v',\n    assuming: {\n      multiply: {\n        commutative: true\n      }\n    },\n    imposeContext: {\n      multiply: {\n        commutative: false\n      }\n    }\n  }, // undo temporary rules\n  // { l: '(-1) * n', r: '-n' }, // #811 added test which proved this is redundant\n  {\n    l: 'n+-n1',\n    r: 'n-n1'\n  }, // undo replace 'subtract'\n  {\n    s: 'n*(n1^-1) -> n/n1',\n    // undo replace 'divide'; for * commutative\n    assuming: {\n      multiply: {\n        commutative: true\n      }\n    } // o.w. / not conventional\n\n  }, {\n    s: 'n*n1^-n2 -> n/n1^n2',\n    assuming: {\n      multiply: {\n        commutative: true\n      }\n    } // o.w. / not conventional\n\n  }, {\n    s: 'n^-1 -> 1/n',\n    assuming: {\n      multiply: {\n        commutative: true\n      }\n    } // o.w. / not conventional\n\n  }, {\n    l: 'n^1',\n    r: 'n'\n  }, // can be produced by power cancellation\n  {\n    s: 'n*(n1/n2) -> (n*n1)/n2',\n    // '*' before '/'\n    assuming: {\n      multiply: {\n        associative: true\n      }\n    }\n  }, {\n    s: 'n-(n1+n2) -> n-n1-n2',\n    // '-' before '+'\n    assuming: {\n      addition: {\n        associative: true,\n        commutative: true\n      }\n    }\n  }, // { l: '(n1/n2)/n3', r: 'n1/(n2*n3)' },\n  // { l: '(n*n1)/(n*n2)', r: 'n1/n2' },\n  // simplifyConstant can leave an extra factor of 1, which can always\n  // be eliminated, since the identity always commutes\n  {\n    l: '1*n',\n    r: 'n',\n    imposeContext: {\n      multiply: {\n        commutative: true\n      }\n    }\n  }, {\n    s: 'n1/(n2/n3) -> (n1*n3)/n2',\n    assuming: {\n      multiply: {\n        associative: true\n      }\n    }\n  }, {\n    l: 'n1/(-n2)',\n    r: '-n1/n2'\n  }];\n  /**\n   * Takes any rule object as allowed by the specification in simplify\n   * and puts it in a standard form used by applyRule\n   */\n\n  function _canonicalizeRule(ruleObject, context) {\n    var newRule = {};\n\n    if (ruleObject.s) {\n      var lr = ruleObject.s.split('->');\n\n      if (lr.length === 2) {\n        newRule.l = lr[0];\n        newRule.r = lr[1];\n      } else {\n        throw SyntaxError('Could not parse rule: ' + ruleObject.s);\n      }\n    } else {\n      newRule.l = ruleObject.l;\n      newRule.r = ruleObject.r;\n    }\n\n    newRule.l = removeParens(parse(newRule.l));\n    newRule.r = removeParens(parse(newRule.r));\n\n    for (var prop of ['imposeContext', 'repeat', 'assuming']) {\n      if (prop in ruleObject) {\n        newRule[prop] = ruleObject[prop];\n      }\n    }\n\n    if (ruleObject.evaluate) {\n      newRule.evaluate = parse(ruleObject.evaluate);\n    }\n\n    if (isAssociative(newRule.l, context)) {\n      var makeNode = createMakeNodeFunction(newRule.l);\n\n      var expandsym = _getExpandPlaceholderSymbol();\n\n      newRule.expanded = {};\n      newRule.expanded.l = makeNode([newRule.l.clone(), expandsym]); // Push the expandsym into the deepest possible branch.\n      // This helps to match the newRule against nodes returned from getSplits() later on.\n\n      flatten(newRule.expanded.l, context);\n      unflattenr(newRule.expanded.l, context);\n      newRule.expanded.r = makeNode([newRule.r, expandsym]);\n    }\n\n    return newRule;\n  }\n  /**\n   * Parse the string array of rules into nodes\n   *\n   * Example syntax for rules:\n   *\n   * Position constants to the left in a product:\n   * { l: 'n1 * c1', r: 'c1 * n1' }\n   * n1 is any Node, and c1 is a ConstantNode.\n   *\n   * Apply difference of squares formula:\n   * { l: '(n1 - n2) * (n1 + n2)', r: 'n1^2 - n2^2' }\n   * n1, n2 mean any Node.\n   *\n   * Short hand notation:\n   * 'n1 * c1 -> c1 * n1'\n   */\n\n\n  function _buildRules(rules, context) {\n    // Array of rules to be used to simplify expressions\n    var ruleSet = [];\n\n    for (var i = 0; i < rules.length; i++) {\n      var rule = rules[i];\n      var newRule = void 0;\n      var ruleType = typeof rule;\n\n      switch (ruleType) {\n        case 'string':\n          rule = {\n            s: rule\n          };\n\n        /* falls through */\n\n        case 'object':\n          newRule = _canonicalizeRule(rule, context);\n          break;\n\n        case 'function':\n          newRule = rule;\n          break;\n\n        default:\n          throw TypeError('Unsupported type of rule: ' + ruleType);\n      } // console.log('Adding rule: ' + rules[i])\n      // console.log(newRule)\n\n\n      ruleSet.push(newRule);\n    }\n\n    return ruleSet;\n  }\n\n  var _lastsym = 0;\n\n  function _getExpandPlaceholderSymbol() {\n    return new SymbolNode('_p' + _lastsym++);\n  }\n\n  function mapRule(nodes, rule, context) {\n    var resNodes = nodes;\n\n    if (nodes) {\n      for (var i = 0; i < nodes.length; ++i) {\n        var newNode = applyRule(nodes[i], rule, context);\n\n        if (newNode !== nodes[i]) {\n          if (resNodes === nodes) {\n            resNodes = nodes.slice();\n          }\n\n          resNodes[i] = newNode;\n        }\n      }\n    }\n\n    return resNodes;\n  }\n  /**\n   * Returns a simplfied form of node, or the original node if no simplification was possible.\n   *\n   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node\n   * @param  {Object | Function} rule\n   * @param  {Object} context -- information about assumed properties of operators\n   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} The simplified form of `expr`, or the original node if no simplification was possible.\n   */\n\n\n  function applyRule(node, rule, context) {\n    //    console.log('Entering applyRule(\"', rule.l.toString({parenthesis:'all'}), '->', rule.r.toString({parenthesis:'all'}), '\",', node.toString({parenthesis:'all'}),')')\n    // check that the assumptions for this rule are satisfied by the current\n    // context:\n    if (rule.assuming) {\n      for (var symbol in rule.assuming) {\n        for (var property in rule.assuming[symbol]) {\n          if (hasProperty(symbol, property, context) !== rule.assuming[symbol][property]) {\n            return node;\n          }\n        }\n      }\n    }\n\n    var mergedContext = mergeContext(rule.imposeContext, context); // Do not clone node unless we find a match\n\n    var res = node; // First replace our child nodes with their simplified versions\n    // If a child could not be simplified, applying the rule to it\n    // will have no effect since the node is returned unchanged\n\n    if (res instanceof OperatorNode || res instanceof FunctionNode) {\n      var newArgs = mapRule(res.args, rule, context);\n\n      if (newArgs !== res.args) {\n        res = res.clone();\n        res.args = newArgs;\n      }\n    } else if (res instanceof ParenthesisNode) {\n      if (res.content) {\n        var newContent = applyRule(res.content, rule, context);\n\n        if (newContent !== res.content) {\n          res = new ParenthesisNode(newContent);\n        }\n      }\n    } else if (res instanceof ArrayNode) {\n      var newItems = mapRule(res.items, rule, context);\n\n      if (newItems !== res.items) {\n        res = new ArrayNode(newItems);\n      }\n    } else if (res instanceof AccessorNode) {\n      var newObj = res.object;\n\n      if (res.object) {\n        newObj = applyRule(res.object, rule, context);\n      }\n\n      var newIndex = res.index;\n\n      if (res.index) {\n        newIndex = applyRule(res.index, rule, context);\n      }\n\n      if (newObj !== res.object || newIndex !== res.index) {\n        res = new AccessorNode(newObj, newIndex);\n      }\n    } else if (res instanceof IndexNode) {\n      var newDims = mapRule(res.dimensions, rule, context);\n\n      if (newDims !== res.dimensions) {\n        res = new IndexNode(newDims);\n      }\n    } else if (res instanceof ObjectNode) {\n      var changed = false;\n      var newProps = {};\n\n      for (var prop in res.properties) {\n        newProps[prop] = applyRule(res.properties[prop], rule, context);\n\n        if (newProps[prop] !== res.properties[prop]) {\n          changed = true;\n        }\n      }\n\n      if (changed) {\n        res = new ObjectNode(newProps);\n      }\n    } // Try to match a rule against this node\n\n\n    var repl = rule.r;\n\n    var matches = _ruleMatch(rule.l, res, mergedContext)[0]; // If the rule is associative operator, we can try matching it while allowing additional terms.\n    // This allows us to match rules like 'n+n' to the expression '(1+x)+x' or even 'x+1+x' if the operator is commutative.\n\n\n    if (!matches && rule.expanded) {\n      repl = rule.expanded.r;\n      matches = _ruleMatch(rule.expanded.l, res, mergedContext)[0];\n    }\n\n    if (matches) {\n      // const before = res.toString({parenthesis: 'all'})\n      // Create a new node by cloning the rhs of the matched rule\n      // we keep any implicit multiplication state if relevant\n      var implicit = res.implicit;\n      res = repl.clone();\n\n      if (implicit && 'implicit' in repl) {\n        res.implicit = true;\n      } // Replace placeholders with their respective nodes without traversing deeper into the replaced nodes\n\n\n      res = res.transform(function (node) {\n        if (node.isSymbolNode && hasOwnProperty(matches.placeholders, node.name)) {\n          return matches.placeholders[node.name].clone();\n        } else {\n          return node;\n        }\n      }); // const after = res.toString({parenthesis: 'all'})\n      // console.log('Simplified ' + before + ' to ' + after)\n    }\n\n    if (rule.repeat && res !== node) {\n      res = applyRule(res, rule, context);\n    }\n\n    return res;\n  }\n  /**\n   * Get (binary) combinations of a flattened binary node\n   * e.g. +(node1, node2, node3) -> [\n   *        +(node1,  +(node2, node3)),\n   *        +(node2,  +(node1, node3)),\n   *        +(node3,  +(node1, node2))]\n   *\n   */\n\n\n  function getSplits(node, context) {\n    var res = [];\n    var right, rightArgs;\n    var makeNode = createMakeNodeFunction(node);\n\n    if (isCommutative(node, context)) {\n      for (var i = 0; i < node.args.length; i++) {\n        rightArgs = node.args.slice(0);\n        rightArgs.splice(i, 1);\n        right = rightArgs.length === 1 ? rightArgs[0] : makeNode(rightArgs);\n        res.push(makeNode([node.args[i], right]));\n      }\n    } else {\n      // Keep order, but try all parenthesizations\n      for (var _i = 1; _i < node.args.length; _i++) {\n        var left = node.args[0];\n\n        if (_i > 1) {\n          left = makeNode(node.args.slice(0, _i));\n        }\n\n        rightArgs = node.args.slice(_i);\n        right = rightArgs.length === 1 ? rightArgs[0] : makeNode(rightArgs);\n        res.push(makeNode([left, right]));\n      }\n    }\n\n    return res;\n  }\n  /**\n   * Returns the set union of two match-placeholders or null if there is a conflict.\n   */\n\n\n  function mergeMatch(match1, match2) {\n    var res = {\n      placeholders: {}\n    }; // Some matches may not have placeholders; this is OK\n\n    if (!match1.placeholders && !match2.placeholders) {\n      return res;\n    } else if (!match1.placeholders) {\n      return match2;\n    } else if (!match2.placeholders) {\n      return match1;\n    } // Placeholders with the same key must match exactly\n\n\n    for (var key in match1.placeholders) {\n      if (hasOwnProperty(match1.placeholders, key)) {\n        res.placeholders[key] = match1.placeholders[key];\n\n        if (hasOwnProperty(match2.placeholders, key)) {\n          if (!_exactMatch(match1.placeholders[key], match2.placeholders[key])) {\n            return null;\n          }\n        }\n      }\n    }\n\n    for (var _key in match2.placeholders) {\n      if (hasOwnProperty(match2.placeholders, _key)) {\n        res.placeholders[_key] = match2.placeholders[_key];\n      }\n    }\n\n    return res;\n  }\n  /**\n   * Combine two lists of matches by applying mergeMatch to the cartesian product of two lists of matches.\n   * Each list represents matches found in one child of a node.\n   */\n\n\n  function combineChildMatches(list1, list2) {\n    var res = [];\n\n    if (list1.length === 0 || list2.length === 0) {\n      return res;\n    }\n\n    var merged;\n\n    for (var i1 = 0; i1 < list1.length; i1++) {\n      for (var i2 = 0; i2 < list2.length; i2++) {\n        merged = mergeMatch(list1[i1], list2[i2]);\n\n        if (merged) {\n          res.push(merged);\n        }\n      }\n    }\n\n    return res;\n  }\n  /**\n   * Combine multiple lists of matches by applying mergeMatch to the cartesian product of two lists of matches.\n   * Each list represents matches found in one child of a node.\n   * Returns a list of unique matches.\n   */\n\n\n  function mergeChildMatches(childMatches) {\n    if (childMatches.length === 0) {\n      return childMatches;\n    }\n\n    var sets = childMatches.reduce(combineChildMatches);\n    var uniqueSets = [];\n    var unique = {};\n\n    for (var i = 0; i < sets.length; i++) {\n      var s = JSON.stringify(sets[i]);\n\n      if (!unique[s]) {\n        unique[s] = true;\n        uniqueSets.push(sets[i]);\n      }\n    }\n\n    return uniqueSets;\n  }\n  /**\n   * Determines whether node matches rule.\n   *\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} rule\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node\n   * @param {Object} context -- provides assumed properties of operators\n   * @param {Boolean} isSplit -- whether we are in process of splitting an\n   *                    n-ary operator node into possible binary combinations.\n   *                    Defaults to false.\n   * @return {Object} Information about the match, if it exists.\n   */\n\n\n  function _ruleMatch(rule, node, context, isSplit) {\n    //    console.log('Entering _ruleMatch(' + JSON.stringify(rule) + ', ' + JSON.stringify(node) + ')')\n    //    console.log('rule = ' + rule)\n    //    console.log('node = ' + node)\n    //    console.log('Entering _ruleMatch(', rule.toString({parenthesis:'all'}), ', ', node.toString({parenthesis:'all'}), ', ', context, ')')\n    var res = [{\n      placeholders: {}\n    }];\n\n    if (rule instanceof OperatorNode && node instanceof OperatorNode || rule instanceof FunctionNode && node instanceof FunctionNode) {\n      // If the rule is an OperatorNode or a FunctionNode, then node must match exactly\n      if (rule instanceof OperatorNode) {\n        if (rule.op !== node.op || rule.fn !== node.fn) {\n          return [];\n        }\n      } else if (rule instanceof FunctionNode) {\n        if (rule.name !== node.name) {\n          return [];\n        }\n      } // rule and node match. Search the children of rule and node.\n\n\n      if (node.args.length === 1 && rule.args.length === 1 || !isAssociative(node, context) && node.args.length === rule.args.length || isSplit) {\n        // Expect non-associative operators to match exactly,\n        // except in any order if operator is commutative\n        var childMatches = [];\n\n        for (var i = 0; i < rule.args.length; i++) {\n          var childMatch = _ruleMatch(rule.args[i], node.args[i], context);\n\n          if (childMatch.length === 0) {\n            // Child did not match, so stop searching immediately\n            break;\n          } // The child matched, so add the information returned from the child to our result\n\n\n          childMatches.push(childMatch);\n        }\n\n        if (childMatches.length !== rule.args.length) {\n          if (!isCommutative(node, context) || // exact match in order needed\n          rule.args.length === 1) {\n            // nothing to commute\n            return [];\n          }\n\n          if (rule.args.length > 2) {\n            /* Need to generate all permutations and try them.\n             * It's a bit complicated, and unlikely to come up since there\n             * are very few ternary or higher operators. So punt for now.\n             */\n            throw new Error('permuting >2 commutative non-associative rule arguments not yet implemented');\n          }\n          /* Exactly two arguments, try them reversed */\n\n\n          var leftMatch = _ruleMatch(rule.args[0], node.args[1], context);\n\n          if (leftMatch.length === 0) {\n            return [];\n          }\n\n          var rightMatch = _ruleMatch(rule.args[1], node.args[0], context);\n\n          if (rightMatch.length === 0) {\n            return [];\n          }\n\n          childMatches = [leftMatch, rightMatch];\n        }\n\n        res = mergeChildMatches(childMatches);\n      } else if (node.args.length >= 2 && rule.args.length === 2) {\n        // node is flattened, rule is not\n        // Associative operators/functions can be split in different ways so we check if the rule matches each\n        // them and return their union.\n        var splits = getSplits(node, context);\n        var splitMatches = [];\n\n        for (var _i2 = 0; _i2 < splits.length; _i2++) {\n          var matchSet = _ruleMatch(rule, splits[_i2], context, true); // recursing at the same tree depth here\n\n\n          splitMatches = splitMatches.concat(matchSet);\n        }\n\n        return splitMatches;\n      } else if (rule.args.length > 2) {\n        throw Error('Unexpected non-binary associative function: ' + rule.toString());\n      } else {\n        // Incorrect number of arguments in rule and node, so no match\n        return [];\n      }\n    } else if (rule instanceof SymbolNode) {\n      // If the rule is a SymbolNode, then it carries a special meaning\n      // according to the first character of the symbol node name.\n      // c.* matches a ConstantNode\n      // n.* matches any node\n      if (rule.name.length === 0) {\n        throw new Error('Symbol in rule has 0 length...!?');\n      }\n\n      if (SUPPORTED_CONSTANTS[rule.name]) {\n        // built-in constant must match exactly\n        if (rule.name !== node.name) {\n          return [];\n        }\n      } else if (rule.name[0] === 'n' || rule.name.substring(0, 2) === '_p') {\n        // rule matches _anything_, so assign this node to the rule.name placeholder\n        // Assign node to the rule.name placeholder.\n        // Our parent will check for matches among placeholders.\n        res[0].placeholders[rule.name] = node;\n      } else if (rule.name[0] === 'v') {\n        // rule matches any variable thing (not a ConstantNode)\n        if (!isConstantNode(node)) {\n          res[0].placeholders[rule.name] = node;\n        } else {\n          // Mis-match: rule was expecting something other than a ConstantNode\n          return [];\n        }\n      } else if (rule.name[0] === 'c') {\n        // rule matches any ConstantNode\n        if (node instanceof ConstantNode) {\n          res[0].placeholders[rule.name] = node;\n        } else {\n          // Mis-match: rule was expecting a ConstantNode\n          return [];\n        }\n      } else {\n        throw new Error('Invalid symbol in rule: ' + rule.name);\n      }\n    } else if (rule instanceof ConstantNode) {\n      // Literal constant must match exactly\n      if (!equal(rule.value, node.value)) {\n        return [];\n      }\n    } else {\n      // Some other node was encountered which we aren't prepared for, so no match\n      return [];\n    } // It's a match!\n    // console.log('_ruleMatch(' + rule.toString() + ', ' + node.toString() + ') found a match')\n\n\n    return res;\n  }\n  /**\n   * Determines whether p and q (and all their children nodes) are identical.\n   *\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} p\n   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} q\n   * @return {Object} Information about the match, if it exists.\n   */\n\n\n  function _exactMatch(p, q) {\n    if (p instanceof ConstantNode && q instanceof ConstantNode) {\n      if (!equal(p.value, q.value)) {\n        return false;\n      }\n    } else if (p instanceof SymbolNode && q instanceof SymbolNode) {\n      if (p.name !== q.name) {\n        return false;\n      }\n    } else if (p instanceof OperatorNode && q instanceof OperatorNode || p instanceof FunctionNode && q instanceof FunctionNode) {\n      if (p instanceof OperatorNode) {\n        if (p.op !== q.op || p.fn !== q.fn) {\n          return false;\n        }\n      } else if (p instanceof FunctionNode) {\n        if (p.name !== q.name) {\n          return false;\n        }\n      }\n\n      if (p.args.length !== q.args.length) {\n        return false;\n      }\n\n      for (var i = 0; i < p.args.length; i++) {\n        if (!_exactMatch(p.args[i], q.args[i])) {\n          return false;\n        }\n      }\n    } else {\n      return false;\n    }\n\n    return true;\n  }\n\n  return simplify;\n});"],"mappings":"AAAA,SAASA,cAAc,EAAEC,iBAAiB,QAAQ,mBAAmB;AACrE,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,UAAU,QAAQ,oBAAoB;AAC/C,SAASC,sBAAsB,QAAQ,gCAAgC;AACvE,SAASC,cAAc,QAAQ,uBAAuB;AACtD,SAASC,cAAc,EAAEC,SAAS,QAAQ,oBAAoB;AAC9D,IAAIC,IAAI,GAAG,UAAU;AACrB,IAAIC,YAAY,GAAG,CAAC,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,UAAU,EAAE,UAAU,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAE,SAAS,EAAE,cAAc,EAAE,WAAW,EAAE,YAAY,EAAE,mBAAmB,EAAE,QAAQ,EAAE,cAAc,EAAE,WAAW,EAAE,cAAc,EAAE,cAAc,EAAE,WAAW,EAAE,YAAY,EAAE,cAAc,EAAE,iBAAiB,EAAE,YAAY,CAAC;AAChV,OAAO,IAAIC,cAAc,GAAG,eAAeR,OAAO,CAACM,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EAC7E,IAAI;IACFC,MAAM;IACNC,KAAK;IACLC,KAAK;IACLC,GAAG;IACHC,QAAQ;IACRC,QAAQ;IACRC,MAAM;IACNC,GAAG;IACHC,MAAM;IACNC,KAAK;IACLC,OAAO;IACPC,YAAY;IACZC,QAAQ;IACRC,SAAS;IACTC,iBAAiB;IACjBC,MAAM;IACNC,YAAY;IACZC,SAAS;IACTC,YAAY;IACZC,YAAY;IACZC,SAAS;IACTC,UAAU;IACVC,YAAY;IACZC,eAAe;IACfC;EACF,CAAC,GAAGzB,IAAI;EACR,IAAI0B,gBAAgB,GAAGjC,sBAAsB,CAAC;IAC5CS,KAAK;IACLD,MAAM;IACNc,iBAAiB;IACjBC,MAAM;IACNH,QAAQ;IACRC,SAAS;IACTG,YAAY;IACZC,SAAS;IACTC,YAAY;IACZC,YAAY;IACZC,SAAS;IACTC,UAAU;IACVC,YAAY;IACZE;EACF,CAAC,CAAC;EACF,IAAI;IACFE,WAAW;IACXC,aAAa;IACbC,aAAa;IACbC,YAAY;IACZC,OAAO;IACPC,UAAU;IACVC,UAAU;IACVC,sBAAsB;IACtBC,cAAc;IACdC,WAAW;IACXC;EACF,CAAC,GAAG7C,UAAU,CAAC;IACb4B,YAAY;IACZG,YAAY;IACZE;EACF,CAAC,CAAC;EACF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE,IAAIa,QAAQ,GAAGpC,KAAK,CAAC,UAAU,EAAE;IAC/BqC,MAAM,EAAE,SAASA,MAAM,CAACC,IAAI,EAAE;MAC5B,OAAO,IAAI,CAACrC,KAAK,CAACqC,IAAI,CAAC,EAAE,IAAI,CAACC,KAAK,EAAE9C,cAAc,EAAE,EAAE,CAAC,CAAC,CAAC;IAC5D,CAAC;IACD,sBAAsB,EAAE,SAAS+C,eAAe,CAACF,IAAI,EAAEG,KAAK,EAAE;MAC5D,OAAO,IAAI,CAACxC,KAAK,CAACqC,IAAI,CAAC,EAAE,IAAI,CAACC,KAAK,EAAEE,KAAK,EAAE,CAAC,CAAC,CAAC;IACjD,CAAC;IACD,8BAA8B,EAAE,SAASC,qBAAqB,CAACJ,IAAI,EAAEG,KAAK,EAAEE,OAAO,EAAE;MACnF,OAAO,IAAI,CAAC1C,KAAK,CAACqC,IAAI,CAAC,EAAE,IAAI,CAACC,KAAK,EAAEE,KAAK,EAAEE,OAAO,CAAC;IACtD,CAAC;IACD,eAAe,EAAE,SAASC,WAAW,CAACN,IAAI,EAAEC,KAAK,EAAE;MACjD,OAAO,IAAI,CAACtC,KAAK,CAACqC,IAAI,CAAC,EAAEC,KAAK,EAAE9C,cAAc,EAAE,EAAE,CAAC,CAAC,CAAC;IACvD,CAAC;IACD,6BAA6B,EAAE,SAASoD,oBAAoB,CAACP,IAAI,EAAEC,KAAK,EAAEE,KAAK,EAAE;MAC/E,OAAO,IAAI,CAACxC,KAAK,CAACqC,IAAI,CAAC,EAAEC,KAAK,EAAEE,KAAK,EAAE,CAAC,CAAC,CAAC;IAC5C,CAAC;IACD,qCAAqC,EAAE,SAASK,0BAA0B,CAACR,IAAI,EAAEC,KAAK,EAAEE,KAAK,EAAEE,OAAO,EAAE;MACtG,OAAO,IAAI,CAAC1C,KAAK,CAACqC,IAAI,CAAC,EAAEC,KAAK,EAAEE,KAAK,EAAEE,OAAO,CAAC;IACjD,CAAC;IACD,oBAAoB,EAAE,SAASI,aAAa,CAACT,IAAI,EAAEG,KAAK,EAAE;MACxD,OAAO,IAAI,CAACH,IAAI,EAAE,IAAI,CAACC,KAAK,EAAEE,KAAK,EAAE,CAAC,CAAC,CAAC;IAC1C,CAAC;IACD,4BAA4B,EAAE,SAASO,mBAAmB,CAACV,IAAI,EAAEG,KAAK,EAAEE,OAAO,EAAE;MAC/E,OAAO,IAAI,CAACL,IAAI,EAAE,IAAI,CAACC,KAAK,EAAEE,KAAK,EAAEE,OAAO,CAAC;IAC/C,CAAC;IACDM,IAAI,EAAE,SAASA,IAAI,CAACX,IAAI,EAAE;MACxB,OAAO,IAAI,CAACA,IAAI,EAAE,IAAI,CAACC,KAAK,EAAE9C,cAAc,EAAE,EAAE,CAAC,CAAC,CAAC;IACrD,CAAC;IACD,aAAa,EAAE,SAASyD,SAAS,CAACZ,IAAI,EAAEC,KAAK,EAAE;MAC7C,OAAO,IAAI,CAACD,IAAI,EAAEC,KAAK,EAAE9C,cAAc,EAAE,EAAE,CAAC,CAAC,CAAC;IAChD,CAAC;IACD,2BAA2B,EAAE,SAAS0D,kBAAkB,CAACb,IAAI,EAAEC,KAAK,EAAEE,KAAK,EAAE;MAC3E,OAAO,IAAI,CAACH,IAAI,EAAEC,KAAK,EAAEE,KAAK,EAAE,CAAC,CAAC,CAAC;IACrC,CAAC;IACD,6BAA6B,EAAE,SAASW,qBAAqB,CAACd,IAAI,EAAEC,KAAK,EAAEE,KAAK,EAAEE,OAAO,EAAE;MACzF,OAAO,IAAI,CAACL,IAAI,EAAEC,KAAK,EAAE7C,SAAS,CAAC+C,KAAK,CAAC,EAAEE,OAAO,CAAC;IACrD,CAAC;IACD,0BAA0B,EAAE,SAASQ,kBAAkB,CAACb,IAAI,EAAEC,KAAK,EAAEE,KAAK,EAAEE,OAAO,EAAE;MACnF,IAAIU,KAAK,GAAGV,OAAO,CAACW,YAAY;MAChCf,KAAK,GAAGgB,WAAW,CAAChB,KAAK,EAAEI,OAAO,CAACa,OAAO,CAAC;MAC3C,IAAIC,GAAG,GAAGhD,OAAO,CAAC6B,IAAI,EAAEG,KAAK,CAAC;MAC9BgB,GAAG,GAAGC,YAAY,CAACD,GAAG,CAAC;MACvB,IAAIE,OAAO,GAAG,CAAC,CAAC;MAChB,IAAIC,GAAG,GAAGH,GAAG,CAACI,QAAQ,CAAC;QACrBC,WAAW,EAAE;MACf,CAAC,CAAC;MAEF,OAAO,CAACH,OAAO,CAACC,GAAG,CAAC,EAAE;QACpBD,OAAO,CAACC,GAAG,CAAC,GAAG,IAAI;QACnBG,QAAQ,GAAG,CAAC,CAAC,CAAC;;QAEd,IAAIC,OAAO,GAAGJ,GAAG;QACjB,IAAIP,KAAK,EAAEY,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEN,GAAG,CAAC;QAE3C,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG5B,KAAK,CAAC6B,MAAM,EAAED,CAAC,EAAE,EAAE;UACrC,IAAIE,OAAO,GAAG,EAAE;UAEhB,IAAI,OAAO9B,KAAK,CAAC4B,CAAC,CAAC,KAAK,UAAU,EAAE;YAClCV,GAAG,GAAGlB,KAAK,CAAC4B,CAAC,CAAC,CAACV,GAAG,EAAEd,OAAO,CAAC;YAC5B,IAAIU,KAAK,EAAEgB,OAAO,GAAG9B,KAAK,CAAC4B,CAAC,CAAC,CAACxE,IAAI;UACpC,CAAC,MAAM;YACLkC,OAAO,CAAC4B,GAAG,EAAEd,OAAO,CAACa,OAAO,CAAC;YAC7BC,GAAG,GAAGa,SAAS,CAACb,GAAG,EAAElB,KAAK,CAAC4B,CAAC,CAAC,EAAExB,OAAO,CAACa,OAAO,CAAC;YAE/C,IAAIH,KAAK,EAAE;cACTgB,OAAO,GAAG,EAAE,CAACE,MAAM,CAAChC,KAAK,CAAC4B,CAAC,CAAC,CAACK,CAAC,CAACX,QAAQ,EAAE,EAAE,MAAM,CAAC,CAACU,MAAM,CAAChC,KAAK,CAAC4B,CAAC,CAAC,CAACM,CAAC,CAACZ,QAAQ,EAAE,CAAC;YAClF;UACF;UAEA,IAAIR,KAAK,EAAE;YACT,IAAIqB,MAAM,GAAGjB,GAAG,CAACI,QAAQ,CAAC;cACxBC,WAAW,EAAE;YACf,CAAC,CAAC;YAEF,IAAIY,MAAM,KAAKV,OAAO,EAAE;cACtBC,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEG,OAAO,EAAE,UAAU,EAAEK,MAAM,CAAC;cACpDV,OAAO,GAAGU,MAAM;YAClB;UACF;UACA;AACV;AACA;;UAGU3C,UAAU,CAAC0B,GAAG,EAAEd,OAAO,CAACa,OAAO,CAAC;QAClC;QAEAI,GAAG,GAAGH,GAAG,CAACI,QAAQ,CAAC;UACjBC,WAAW,EAAE;QACf,CAAC,CAAC;MACJ;MAEA,OAAOL,GAAG;IACZ;EACF,CAAC,CAAC;EACFrB,QAAQ,CAACH,cAAc,GAAGA,cAAc;EACxCG,QAAQ,CAACF,WAAW,GAAGA,WAAW;EAClCE,QAAQ,CAACD,eAAe,GAAGA,eAAe;EAE1C,SAASuB,YAAY,CAACiB,IAAI,EAAE;IAC1B,OAAOA,IAAI,CAACC,SAAS,CAAC,UAAUD,IAAI,EAAEE,IAAI,EAAEC,MAAM,EAAE;MAClD,OAAO1F,iBAAiB,CAACuF,IAAI,CAAC,GAAGjB,YAAY,CAACiB,IAAI,CAACI,OAAO,CAAC,GAAGJ,IAAI;IACpE,CAAC,CAAC;EACJ,CAAC,CAAC;;EAGF,IAAIK,mBAAmB,GAAG;IACxBC,IAAI,EAAE,IAAI;IACVC,KAAK,EAAE,IAAI;IACXC,CAAC,EAAE,IAAI;IACPhB,CAAC,EAAE,IAAI;IACPiB,QAAQ,EAAE,IAAI;IACdC,GAAG,EAAE,IAAI;IACTC,IAAI,EAAE,IAAI;IACVC,KAAK,EAAE,IAAI;IACXC,MAAM,EAAE,IAAI;IACZC,GAAG,EAAE,IAAI;IACTC,GAAG,EAAE,IAAI;IACTC,EAAE,EAAE,IAAI;IACRC,OAAO,EAAE,IAAI;IACbC,KAAK,EAAE,IAAI;IACXC,GAAG,EAAE,IAAI,CAAC;IACV;IACA;EAEF,CAAC,CAAC,CAAC;EACH;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA1D,QAAQ,CAACG,KAAK,GAAG,CAAC7B,YAAY;EAAE;EAChC;EACA;EACA;EACA;EACA;EACA;EACA;IACE8D,CAAC,EAAE,QAAQ;IACXC,CAAC,EAAE;EACL,CAAC;EAAE;EACH;EACA;EACA;IACEsB,CAAC,EAAE,eAAe;IAClB;IACAC,QAAQ,EAAE;MACR7F,QAAQ,EAAE;QACR8F,KAAK,EAAE;MACT;IACF;EACF,CAAC,EAAE;IACDF,CAAC,EAAE,UAAU;IACb;IACAC,QAAQ,EAAE;MACR7F,QAAQ,EAAE;QACR8F,KAAK,EAAE;MACT;IACF;EACF,CAAC,EAAE;IACDF,CAAC,EAAE,oBAAoB;IACvB;IACAC,QAAQ,EAAE;MACR5F,QAAQ,EAAE;QACR8F,WAAW,EAAE;MACf,CAAC;MACD/F,QAAQ,EAAE;QACR8F,KAAK,EAAE;MACT;IACF;EACF,CAAC,EAAE;IACDF,CAAC,EAAE,oBAAoB;IACvB;IACAC,QAAQ,EAAE;MACR5F,QAAQ,EAAE;QACR8F,WAAW,EAAE;MACf,CAAC;MACD/F,QAAQ,EAAE;QACR8F,KAAK,EAAE;MACT;IACF;EACF,CAAC,EAAE;IACDF,CAAC,EAAE,oBAAoB;IACvB;IACAC,QAAQ,EAAE;MACR5F,QAAQ,EAAE;QACR8F,WAAW,EAAE;MACf,CAAC;MACD/F,QAAQ,EAAE;QACR8F,KAAK,EAAE;MACT;IACF;EACF,CAAC,EAAE;IACDzB,CAAC,EAAE,UAAU;IACbC,CAAC,EAAE;EACL,CAAC,EAAE;IACDD,CAAC,EAAE,IAAI;IACPC,CAAC,EAAE;EACL,CAAC;EAAE;EACH;IACED,CAAC,EAAE,gBAAgB;IACnBC,CAAC,EAAE,mBAAmB;IACtB0B,MAAM,EAAE;EACV,CAAC;EAAE;EACH;IACE3B,CAAC,EAAE,SAAS;IACZC,CAAC,EAAE;EACL,CAAC;EAAE;EACH;IACED,CAAC,EAAE,MAAM;IACTC,CAAC,EAAE;EACL,CAAC,EAAE;IACDsB,CAAC,EAAE,6BAA6B;IAChCC,QAAQ,EAAE;MACR5F,QAAQ,EAAE;QACR8F,WAAW,EAAE;MACf;IACF;EACF,CAAC,EAAE;IACDH,CAAC,EAAE,mCAAmC;IACtCC,QAAQ,EAAE;MACR5F,QAAQ,EAAE;QACR8F,WAAW,EAAE;MACf;IACF;EACF,CAAC;EAAE;EACH;IACEH,CAAC,EAAE,gCAAgC;IACnCC,QAAQ,EAAE;MACR3F,MAAM,EAAE;QACN4F,KAAK,EAAE;MACT;IACF,CAAC,CAAC;EAEJ,CAAC;EAAE;EACH;IACEzB,CAAC,EAAE,yBAAyB;IAC5BC,CAAC,EAAE;EACL,CAAC,EAAE;IACDsB,CAAC,EAAE,0DAA0D;IAC7DC,QAAQ,EAAE;MACR3F,MAAM,EAAE;QACN4F,KAAK,EAAE;MACT;IACF,CAAC,CAAC;EAEJ,CAAC,EAAE;IACDF,CAAC,EAAE,0DAA0D;IAC7DC,QAAQ,EAAE;MACR3F,MAAM,EAAE;QACN4F,KAAK,EAAE;MACT;IACF;EACF,CAAC,EAAE;IACDF,CAAC,EAAE,0DAA0D;IAC7DC,QAAQ,EAAE;MACR3F,MAAM,EAAE;QACN4F,KAAK,EAAE;MACT;IACF;EACF,CAAC,EAAE;IACDzB,CAAC,EAAE,KAAK;IACRC,CAAC,EAAE;EACL,CAAC,EAAE;IACDsB,CAAC,EAAE,sBAAsB;IACzBC,QAAQ,EAAE;MACR3F,MAAM,EAAE;QACN4F,KAAK,EAAE;MACT;IACF,CAAC,CAAC;EAEJ,CAAC,EAAE;IACDF,CAAC,EAAE,0BAA0B;IAC7BC,QAAQ,EAAE;MACR3F,MAAM,EAAE;QACN4F,KAAK,EAAE;MACT;IACF,CAAC,CAAC;EAEJ,CAAC;EAAE;EACH;EACA;EACA;EACAzE,gBAAgB;EAAE;EAClB;EACA;IACEuE,CAAC,EAAE,YAAY;IACfC,QAAQ,EAAE;MACR9F,GAAG,EAAE;QACH+F,KAAK,EAAE;MACT;IACF,CAAC,CAAC;EAEJ,CAAC,EAAE;IACDzB,CAAC,EAAE,MAAM;IACTC,CAAC,EAAE;EACL,CAAC,EAAE;IACDD,CAAC,EAAE,SAAS;IACZC,CAAC,EAAE;EACL,CAAC;EAAE;EACH;IACED,CAAC,EAAE,eAAe;IAClBC,CAAC,EAAE;EACL,CAAC;EAAE;EACH;IACED,CAAC,EAAE,0BAA0B;IAC7BC,CAAC,EAAE;EACL,CAAC,EAAE;IACDD,CAAC,EAAE,0BAA0B;IAC7BC,CAAC,EAAE;EACL,CAAC,EAAE;IACDsB,CAAC,EAAE,oBAAoB;IACvB;IACAC,QAAQ,EAAE;MACR5F,QAAQ,EAAE;QACR8F,WAAW,EAAE;MACf;IACF;EACF,CAAC,EAAE;IACDH,CAAC,EAAE,6BAA6B;IAChCC,QAAQ,EAAE;MACR5F,QAAQ,EAAE;QACR8F,WAAW,EAAE;MACf;IACF;EACF,CAAC,EAAE;IACDH,CAAC,EAAE,6DAA6D;IAChEC,QAAQ,EAAE;MACR5F,QAAQ,EAAE;QACR8F,WAAW,EAAE;MACf;IACF;EACF,CAAC,EAAE;IACDH,CAAC,EAAE,6DAA6D;IAChEC,QAAQ,EAAE;MACR5F,QAAQ,EAAE;QACR8F,WAAW,EAAE;MACf;IACF;EACF,CAAC,EAAE;IACD1B,CAAC,EAAE,SAAS;IACZC,CAAC,EAAE;EACL,CAAC,EAAE;IACDsB,CAAC,EAAE,oBAAoB;IACvBC,QAAQ,EAAE;MACR5F,QAAQ,EAAE;QACR8F,WAAW,EAAE;MACf;IACF;EACF,CAAC,EAAE1E,gBAAgB;EAAE;EACrB;EACA;IACEuE,CAAC,EAAE,oBAAoB;IACvBC,QAAQ,EAAE;MACR7F,QAAQ,EAAE;QACR8F,KAAK,EAAE;MACT;IACF;EACF,CAAC,EAAE;IACDF,CAAC,EAAE,oBAAoB;IACvB;IACAC,QAAQ,EAAE;MACR7F,QAAQ,EAAE;QACR8F,KAAK,EAAE;MACT,CAAC;MACD7F,QAAQ,EAAE;QACR8F,WAAW,EAAE;MACf;IACF;EACF,CAAC;EAAE;EACH;IACEH,CAAC,EAAE,YAAY;IACfC,QAAQ,EAAE;MACR9F,GAAG,EAAE;QACHgG,WAAW,EAAE;MACf;IACF,CAAC;IACDE,aAAa,EAAE;MACblG,GAAG,EAAE;QACHgG,WAAW,EAAE;MACf;IACF;EACF,CAAC,EAAE;IACDH,CAAC,EAAE,YAAY;IACfC,QAAQ,EAAE;MACR5F,QAAQ,EAAE;QACR8F,WAAW,EAAE;MACf;IACF,CAAC;IACDE,aAAa,EAAE;MACbhG,QAAQ,EAAE;QACR8F,WAAW,EAAE;MACf;IACF;EACF,CAAC;EAAE;EACH;EACA;IACE1B,CAAC,EAAE,OAAO;IACVC,CAAC,EAAE;EACL,CAAC;EAAE;EACH;IACEsB,CAAC,EAAE,mBAAmB;IACtB;IACAC,QAAQ,EAAE;MACR5F,QAAQ,EAAE;QACR8F,WAAW,EAAE;MACf;IACF,CAAC,CAAC;EAEJ,CAAC,EAAE;IACDH,CAAC,EAAE,qBAAqB;IACxBC,QAAQ,EAAE;MACR5F,QAAQ,EAAE;QACR8F,WAAW,EAAE;MACf;IACF,CAAC,CAAC;EAEJ,CAAC,EAAE;IACDH,CAAC,EAAE,aAAa;IAChBC,QAAQ,EAAE;MACR5F,QAAQ,EAAE;QACR8F,WAAW,EAAE;MACf;IACF,CAAC,CAAC;EAEJ,CAAC,EAAE;IACD1B,CAAC,EAAE,KAAK;IACRC,CAAC,EAAE;EACL,CAAC;EAAE;EACH;IACEsB,CAAC,EAAE,wBAAwB;IAC3B;IACAC,QAAQ,EAAE;MACR5F,QAAQ,EAAE;QACRiG,WAAW,EAAE;MACf;IACF;EACF,CAAC,EAAE;IACDN,CAAC,EAAE,sBAAsB;IACzB;IACAC,QAAQ,EAAE;MACRM,QAAQ,EAAE;QACRD,WAAW,EAAE,IAAI;QACjBH,WAAW,EAAE;MACf;IACF;EACF,CAAC;EAAE;EACH;EACA;EACA;EACA;IACE1B,CAAC,EAAE,KAAK;IACRC,CAAC,EAAE,GAAG;IACN2B,aAAa,EAAE;MACbhG,QAAQ,EAAE;QACR8F,WAAW,EAAE;MACf;IACF;EACF,CAAC,EAAE;IACDH,CAAC,EAAE,0BAA0B;IAC7BC,QAAQ,EAAE;MACR5F,QAAQ,EAAE;QACRiG,WAAW,EAAE;MACf;IACF;EACF,CAAC,EAAE;IACD7B,CAAC,EAAE,UAAU;IACbC,CAAC,EAAE;EACL,CAAC,CAAC;EACF;AACF;AACA;AACA;;EAEE,SAAS8B,iBAAiB,CAACC,UAAU,EAAEhD,OAAO,EAAE;IAC9C,IAAIiD,OAAO,GAAG,CAAC,CAAC;IAEhB,IAAID,UAAU,CAACT,CAAC,EAAE;MAChB,IAAIW,EAAE,GAAGF,UAAU,CAACT,CAAC,CAACY,KAAK,CAAC,IAAI,CAAC;MAEjC,IAAID,EAAE,CAACtC,MAAM,KAAK,CAAC,EAAE;QACnBqC,OAAO,CAACjC,CAAC,GAAGkC,EAAE,CAAC,CAAC,CAAC;QACjBD,OAAO,CAAChC,CAAC,GAAGiC,EAAE,CAAC,CAAC,CAAC;MACnB,CAAC,MAAM;QACL,MAAME,WAAW,CAAC,wBAAwB,GAAGJ,UAAU,CAACT,CAAC,CAAC;MAC5D;IACF,CAAC,MAAM;MACLU,OAAO,CAACjC,CAAC,GAAGgC,UAAU,CAAChC,CAAC;MACxBiC,OAAO,CAAChC,CAAC,GAAG+B,UAAU,CAAC/B,CAAC;IAC1B;IAEAgC,OAAO,CAACjC,CAAC,GAAGd,YAAY,CAACzD,KAAK,CAACwG,OAAO,CAACjC,CAAC,CAAC,CAAC;IAC1CiC,OAAO,CAAChC,CAAC,GAAGf,YAAY,CAACzD,KAAK,CAACwG,OAAO,CAAChC,CAAC,CAAC,CAAC;IAE1C,KAAK,IAAIoC,IAAI,IAAI,CAAC,eAAe,EAAE,QAAQ,EAAE,UAAU,CAAC,EAAE;MACxD,IAAIA,IAAI,IAAIL,UAAU,EAAE;QACtBC,OAAO,CAACI,IAAI,CAAC,GAAGL,UAAU,CAACK,IAAI,CAAC;MAClC;IACF;IAEA,IAAIL,UAAU,CAACM,QAAQ,EAAE;MACvBL,OAAO,CAACK,QAAQ,GAAG7G,KAAK,CAACuG,UAAU,CAACM,QAAQ,CAAC;IAC/C;IAEA,IAAInF,aAAa,CAAC8E,OAAO,CAACjC,CAAC,EAAEhB,OAAO,CAAC,EAAE;MACrC,IAAIuD,QAAQ,GAAG/E,sBAAsB,CAACyE,OAAO,CAACjC,CAAC,CAAC;MAEhD,IAAIwC,SAAS,GAAGC,2BAA2B,EAAE;MAE7CR,OAAO,CAACS,QAAQ,GAAG,CAAC,CAAC;MACrBT,OAAO,CAACS,QAAQ,CAAC1C,CAAC,GAAGuC,QAAQ,CAAC,CAACN,OAAO,CAACjC,CAAC,CAAC2C,KAAK,EAAE,EAAEH,SAAS,CAAC,CAAC,CAAC,CAAC;MAC/D;;MAEAnF,OAAO,CAAC4E,OAAO,CAACS,QAAQ,CAAC1C,CAAC,EAAEhB,OAAO,CAAC;MACpC1B,UAAU,CAAC2E,OAAO,CAACS,QAAQ,CAAC1C,CAAC,EAAEhB,OAAO,CAAC;MACvCiD,OAAO,CAACS,QAAQ,CAACzC,CAAC,GAAGsC,QAAQ,CAAC,CAACN,OAAO,CAAChC,CAAC,EAAEuC,SAAS,CAAC,CAAC;IACvD;IAEA,OAAOP,OAAO;EAChB;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGE,SAASlD,WAAW,CAAChB,KAAK,EAAEiB,OAAO,EAAE;IACnC;IACA,IAAI4D,OAAO,GAAG,EAAE;IAEhB,KAAK,IAAIjD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG5B,KAAK,CAAC6B,MAAM,EAAED,CAAC,EAAE,EAAE;MACrC,IAAIkD,IAAI,GAAG9E,KAAK,CAAC4B,CAAC,CAAC;MACnB,IAAIsC,OAAO,GAAG,KAAK,CAAC;MACpB,IAAIa,QAAQ,GAAG,OAAOD,IAAI;MAE1B,QAAQC,QAAQ;QACd,KAAK,QAAQ;UACXD,IAAI,GAAG;YACLtB,CAAC,EAAEsB;UACL,CAAC;;QAEH;;QAEA,KAAK,QAAQ;UACXZ,OAAO,GAAGF,iBAAiB,CAACc,IAAI,EAAE7D,OAAO,CAAC;UAC1C;QAEF,KAAK,UAAU;UACbiD,OAAO,GAAGY,IAAI;UACd;QAEF;UACE,MAAME,SAAS,CAAC,4BAA4B,GAAGD,QAAQ,CAAC;MAAC,CAC5D,CAAC;MACF;;MAGAF,OAAO,CAACI,IAAI,CAACf,OAAO,CAAC;IACvB;IAEA,OAAOW,OAAO;EAChB;EAEA,IAAIrD,QAAQ,GAAG,CAAC;EAEhB,SAASkD,2BAA2B,GAAG;IACrC,OAAO,IAAI1F,UAAU,CAAC,IAAI,GAAGwC,QAAQ,EAAE,CAAC;EAC1C;EAEA,SAAS0D,OAAO,CAACC,KAAK,EAAEL,IAAI,EAAE7D,OAAO,EAAE;IACrC,IAAImE,QAAQ,GAAGD,KAAK;IAEpB,IAAIA,KAAK,EAAE;MACT,KAAK,IAAIvD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGuD,KAAK,CAACtD,MAAM,EAAE,EAAED,CAAC,EAAE;QACrC,IAAIyD,OAAO,GAAGtD,SAAS,CAACoD,KAAK,CAACvD,CAAC,CAAC,EAAEkD,IAAI,EAAE7D,OAAO,CAAC;QAEhD,IAAIoE,OAAO,KAAKF,KAAK,CAACvD,CAAC,CAAC,EAAE;UACxB,IAAIwD,QAAQ,KAAKD,KAAK,EAAE;YACtBC,QAAQ,GAAGD,KAAK,CAACG,KAAK,EAAE;UAC1B;UAEAF,QAAQ,CAACxD,CAAC,CAAC,GAAGyD,OAAO;QACvB;MACF;IACF;IAEA,OAAOD,QAAQ;EACjB;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EAGE,SAASrD,SAAS,CAACK,IAAI,EAAE0C,IAAI,EAAE7D,OAAO,EAAE;IACtC;IACA;IACA;IACA,IAAI6D,IAAI,CAACrB,QAAQ,EAAE;MACjB,KAAK,IAAI8B,MAAM,IAAIT,IAAI,CAACrB,QAAQ,EAAE;QAChC,KAAK,IAAI+B,QAAQ,IAAIV,IAAI,CAACrB,QAAQ,CAAC8B,MAAM,CAAC,EAAE;UAC1C,IAAIrG,WAAW,CAACqG,MAAM,EAAEC,QAAQ,EAAEvE,OAAO,CAAC,KAAK6D,IAAI,CAACrB,QAAQ,CAAC8B,MAAM,CAAC,CAACC,QAAQ,CAAC,EAAE;YAC9E,OAAOpD,IAAI;UACb;QACF;MACF;IACF;IAEA,IAAIqD,aAAa,GAAGpG,YAAY,CAACyF,IAAI,CAACjB,aAAa,EAAE5C,OAAO,CAAC,CAAC,CAAC;;IAE/D,IAAIC,GAAG,GAAGkB,IAAI,CAAC,CAAC;IAChB;IACA;;IAEA,IAAIlB,GAAG,YAAYpC,YAAY,IAAIoC,GAAG,YAAYvC,YAAY,EAAE;MAC9D,IAAI+G,OAAO,GAAGR,OAAO,CAAChE,GAAG,CAACyE,IAAI,EAAEb,IAAI,EAAE7D,OAAO,CAAC;MAE9C,IAAIyE,OAAO,KAAKxE,GAAG,CAACyE,IAAI,EAAE;QACxBzE,GAAG,GAAGA,GAAG,CAAC0D,KAAK,EAAE;QACjB1D,GAAG,CAACyE,IAAI,GAAGD,OAAO;MACpB;IACF,CAAC,MAAM,IAAIxE,GAAG,YAAYnC,eAAe,EAAE;MACzC,IAAImC,GAAG,CAACsB,OAAO,EAAE;QACf,IAAIoD,UAAU,GAAG7D,SAAS,CAACb,GAAG,CAACsB,OAAO,EAAEsC,IAAI,EAAE7D,OAAO,CAAC;QAEtD,IAAI2E,UAAU,KAAK1E,GAAG,CAACsB,OAAO,EAAE;UAC9BtB,GAAG,GAAG,IAAInC,eAAe,CAAC6G,UAAU,CAAC;QACvC;MACF;IACF,CAAC,MAAM,IAAI1E,GAAG,YAAYzC,SAAS,EAAE;MACnC,IAAIoH,QAAQ,GAAGX,OAAO,CAAChE,GAAG,CAAC4E,KAAK,EAAEhB,IAAI,EAAE7D,OAAO,CAAC;MAEhD,IAAI4E,QAAQ,KAAK3E,GAAG,CAAC4E,KAAK,EAAE;QAC1B5E,GAAG,GAAG,IAAIzC,SAAS,CAACoH,QAAQ,CAAC;MAC/B;IACF,CAAC,MAAM,IAAI3E,GAAG,YAAY1C,YAAY,EAAE;MACtC,IAAIuH,MAAM,GAAG7E,GAAG,CAAC8E,MAAM;MAEvB,IAAI9E,GAAG,CAAC8E,MAAM,EAAE;QACdD,MAAM,GAAGhE,SAAS,CAACb,GAAG,CAAC8E,MAAM,EAAElB,IAAI,EAAE7D,OAAO,CAAC;MAC/C;MAEA,IAAIgF,QAAQ,GAAG/E,GAAG,CAACgF,KAAK;MAExB,IAAIhF,GAAG,CAACgF,KAAK,EAAE;QACbD,QAAQ,GAAGlE,SAAS,CAACb,GAAG,CAACgF,KAAK,EAAEpB,IAAI,EAAE7D,OAAO,CAAC;MAChD;MAEA,IAAI8E,MAAM,KAAK7E,GAAG,CAAC8E,MAAM,IAAIC,QAAQ,KAAK/E,GAAG,CAACgF,KAAK,EAAE;QACnDhF,GAAG,GAAG,IAAI1C,YAAY,CAACuH,MAAM,EAAEE,QAAQ,CAAC;MAC1C;IACF,CAAC,MAAM,IAAI/E,GAAG,YAAYtC,SAAS,EAAE;MACnC,IAAIuH,OAAO,GAAGjB,OAAO,CAAChE,GAAG,CAACkF,UAAU,EAAEtB,IAAI,EAAE7D,OAAO,CAAC;MAEpD,IAAIkF,OAAO,KAAKjF,GAAG,CAACkF,UAAU,EAAE;QAC9BlF,GAAG,GAAG,IAAItC,SAAS,CAACuH,OAAO,CAAC;MAC9B;IACF,CAAC,MAAM,IAAIjF,GAAG,YAAYrC,UAAU,EAAE;MACpC,IAAIwH,OAAO,GAAG,KAAK;MACnB,IAAIC,QAAQ,GAAG,CAAC,CAAC;MAEjB,KAAK,IAAIhC,IAAI,IAAIpD,GAAG,CAACqF,UAAU,EAAE;QAC/BD,QAAQ,CAAChC,IAAI,CAAC,GAAGvC,SAAS,CAACb,GAAG,CAACqF,UAAU,CAACjC,IAAI,CAAC,EAAEQ,IAAI,EAAE7D,OAAO,CAAC;QAE/D,IAAIqF,QAAQ,CAAChC,IAAI,CAAC,KAAKpD,GAAG,CAACqF,UAAU,CAACjC,IAAI,CAAC,EAAE;UAC3C+B,OAAO,GAAG,IAAI;QAChB;MACF;MAEA,IAAIA,OAAO,EAAE;QACXnF,GAAG,GAAG,IAAIrC,UAAU,CAACyH,QAAQ,CAAC;MAChC;IACF,CAAC,CAAC;;IAGF,IAAIE,IAAI,GAAG1B,IAAI,CAAC5C,CAAC;IAEjB,IAAIuE,OAAO,GAAGC,UAAU,CAAC5B,IAAI,CAAC7C,CAAC,EAAEf,GAAG,EAAEuE,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACzD;;IAGA,IAAI,CAACgB,OAAO,IAAI3B,IAAI,CAACH,QAAQ,EAAE;MAC7B6B,IAAI,GAAG1B,IAAI,CAACH,QAAQ,CAACzC,CAAC;MACtBuE,OAAO,GAAGC,UAAU,CAAC5B,IAAI,CAACH,QAAQ,CAAC1C,CAAC,EAAEf,GAAG,EAAEuE,aAAa,CAAC,CAAC,CAAC,CAAC;IAC9D;IAEA,IAAIgB,OAAO,EAAE;MACX;MACA;MACA;MACA,IAAIE,QAAQ,GAAGzF,GAAG,CAACyF,QAAQ;MAC3BzF,GAAG,GAAGsF,IAAI,CAAC5B,KAAK,EAAE;MAElB,IAAI+B,QAAQ,IAAI,UAAU,IAAIH,IAAI,EAAE;QAClCtF,GAAG,CAACyF,QAAQ,GAAG,IAAI;MACrB,CAAC,CAAC;;MAGFzF,GAAG,GAAGA,GAAG,CAACmB,SAAS,CAAC,UAAUD,IAAI,EAAE;QAClC,IAAIA,IAAI,CAACwE,YAAY,IAAI3J,cAAc,CAACwJ,OAAO,CAACI,YAAY,EAAEzE,IAAI,CAAChF,IAAI,CAAC,EAAE;UACxE,OAAOqJ,OAAO,CAACI,YAAY,CAACzE,IAAI,CAAChF,IAAI,CAAC,CAACwH,KAAK,EAAE;QAChD,CAAC,MAAM;UACL,OAAOxC,IAAI;QACb;MACF,CAAC,CAAC,CAAC,CAAC;MACJ;IACF;;IAEA,IAAI0C,IAAI,CAAClB,MAAM,IAAI1C,GAAG,KAAKkB,IAAI,EAAE;MAC/BlB,GAAG,GAAGa,SAAS,CAACb,GAAG,EAAE4D,IAAI,EAAE7D,OAAO,CAAC;IACrC;IAEA,OAAOC,GAAG;EACZ;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EAGE,SAAS4F,SAAS,CAAC1E,IAAI,EAAEnB,OAAO,EAAE;IAChC,IAAIC,GAAG,GAAG,EAAE;IACZ,IAAI6F,KAAK,EAAEC,SAAS;IACpB,IAAIxC,QAAQ,GAAG/E,sBAAsB,CAAC2C,IAAI,CAAC;IAE3C,IAAIjD,aAAa,CAACiD,IAAI,EAAEnB,OAAO,CAAC,EAAE;MAChC,KAAK,IAAIW,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGQ,IAAI,CAACuD,IAAI,CAAC9D,MAAM,EAAED,CAAC,EAAE,EAAE;QACzCoF,SAAS,GAAG5E,IAAI,CAACuD,IAAI,CAACL,KAAK,CAAC,CAAC,CAAC;QAC9B0B,SAAS,CAACC,MAAM,CAACrF,CAAC,EAAE,CAAC,CAAC;QACtBmF,KAAK,GAAGC,SAAS,CAACnF,MAAM,KAAK,CAAC,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAGxC,QAAQ,CAACwC,SAAS,CAAC;QACnE9F,GAAG,CAAC+D,IAAI,CAACT,QAAQ,CAAC,CAACpC,IAAI,CAACuD,IAAI,CAAC/D,CAAC,CAAC,EAAEmF,KAAK,CAAC,CAAC,CAAC;MAC3C;IACF,CAAC,MAAM;MACL;MACA,KAAK,IAAIG,EAAE,GAAG,CAAC,EAAEA,EAAE,GAAG9E,IAAI,CAACuD,IAAI,CAAC9D,MAAM,EAAEqF,EAAE,EAAE,EAAE;QAC5C,IAAIC,IAAI,GAAG/E,IAAI,CAACuD,IAAI,CAAC,CAAC,CAAC;QAEvB,IAAIuB,EAAE,GAAG,CAAC,EAAE;UACVC,IAAI,GAAG3C,QAAQ,CAACpC,IAAI,CAACuD,IAAI,CAACL,KAAK,CAAC,CAAC,EAAE4B,EAAE,CAAC,CAAC;QACzC;QAEAF,SAAS,GAAG5E,IAAI,CAACuD,IAAI,CAACL,KAAK,CAAC4B,EAAE,CAAC;QAC/BH,KAAK,GAAGC,SAAS,CAACnF,MAAM,KAAK,CAAC,GAAGmF,SAAS,CAAC,CAAC,CAAC,GAAGxC,QAAQ,CAACwC,SAAS,CAAC;QACnE9F,GAAG,CAAC+D,IAAI,CAACT,QAAQ,CAAC,CAAC2C,IAAI,EAAEJ,KAAK,CAAC,CAAC,CAAC;MACnC;IACF;IAEA,OAAO7F,GAAG;EACZ;EACA;AACF;AACA;;EAGE,SAASkG,UAAU,CAACC,MAAM,EAAEC,MAAM,EAAE;IAClC,IAAIpG,GAAG,GAAG;MACR2F,YAAY,EAAE,CAAC;IACjB,CAAC,CAAC,CAAC;;IAEH,IAAI,CAACQ,MAAM,CAACR,YAAY,IAAI,CAACS,MAAM,CAACT,YAAY,EAAE;MAChD,OAAO3F,GAAG;IACZ,CAAC,MAAM,IAAI,CAACmG,MAAM,CAACR,YAAY,EAAE;MAC/B,OAAOS,MAAM;IACf,CAAC,MAAM,IAAI,CAACA,MAAM,CAACT,YAAY,EAAE;MAC/B,OAAOQ,MAAM;IACf,CAAC,CAAC;;IAGF,KAAK,IAAIE,GAAG,IAAIF,MAAM,CAACR,YAAY,EAAE;MACnC,IAAI5J,cAAc,CAACoK,MAAM,CAACR,YAAY,EAAEU,GAAG,CAAC,EAAE;QAC5CrG,GAAG,CAAC2F,YAAY,CAACU,GAAG,CAAC,GAAGF,MAAM,CAACR,YAAY,CAACU,GAAG,CAAC;QAEhD,IAAItK,cAAc,CAACqK,MAAM,CAACT,YAAY,EAAEU,GAAG,CAAC,EAAE;UAC5C,IAAI,CAACC,WAAW,CAACH,MAAM,CAACR,YAAY,CAACU,GAAG,CAAC,EAAED,MAAM,CAACT,YAAY,CAACU,GAAG,CAAC,CAAC,EAAE;YACpE,OAAO,IAAI;UACb;QACF;MACF;IACF;IAEA,KAAK,IAAIE,IAAI,IAAIH,MAAM,CAACT,YAAY,EAAE;MACpC,IAAI5J,cAAc,CAACqK,MAAM,CAACT,YAAY,EAAEY,IAAI,CAAC,EAAE;QAC7CvG,GAAG,CAAC2F,YAAY,CAACY,IAAI,CAAC,GAAGH,MAAM,CAACT,YAAY,CAACY,IAAI,CAAC;MACpD;IACF;IAEA,OAAOvG,GAAG;EACZ;EACA;AACF;AACA;AACA;;EAGE,SAASwG,mBAAmB,CAACC,KAAK,EAAEC,KAAK,EAAE;IACzC,IAAI1G,GAAG,GAAG,EAAE;IAEZ,IAAIyG,KAAK,CAAC9F,MAAM,KAAK,CAAC,IAAI+F,KAAK,CAAC/F,MAAM,KAAK,CAAC,EAAE;MAC5C,OAAOX,GAAG;IACZ;IAEA,IAAI2G,MAAM;IAEV,KAAK,IAAIC,EAAE,GAAG,CAAC,EAAEA,EAAE,GAAGH,KAAK,CAAC9F,MAAM,EAAEiG,EAAE,EAAE,EAAE;MACxC,KAAK,IAAIC,EAAE,GAAG,CAAC,EAAEA,EAAE,GAAGH,KAAK,CAAC/F,MAAM,EAAEkG,EAAE,EAAE,EAAE;QACxCF,MAAM,GAAGT,UAAU,CAACO,KAAK,CAACG,EAAE,CAAC,EAAEF,KAAK,CAACG,EAAE,CAAC,CAAC;QAEzC,IAAIF,MAAM,EAAE;UACV3G,GAAG,CAAC+D,IAAI,CAAC4C,MAAM,CAAC;QAClB;MACF;IACF;IAEA,OAAO3G,GAAG;EACZ;EACA;AACF;AACA;AACA;AACA;;EAGE,SAAS8G,iBAAiB,CAACC,YAAY,EAAE;IACvC,IAAIA,YAAY,CAACpG,MAAM,KAAK,CAAC,EAAE;MAC7B,OAAOoG,YAAY;IACrB;IAEA,IAAIC,IAAI,GAAGD,YAAY,CAACE,MAAM,CAACT,mBAAmB,CAAC;IACnD,IAAIU,UAAU,GAAG,EAAE;IACnB,IAAIC,MAAM,GAAG,CAAC,CAAC;IAEf,KAAK,IAAIzG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGsG,IAAI,CAACrG,MAAM,EAAED,CAAC,EAAE,EAAE;MACpC,IAAI4B,CAAC,GAAG8E,IAAI,CAACC,SAAS,CAACL,IAAI,CAACtG,CAAC,CAAC,CAAC;MAE/B,IAAI,CAACyG,MAAM,CAAC7E,CAAC,CAAC,EAAE;QACd6E,MAAM,CAAC7E,CAAC,CAAC,GAAG,IAAI;QAChB4E,UAAU,CAACnD,IAAI,CAACiD,IAAI,CAACtG,CAAC,CAAC,CAAC;MAC1B;IACF;IAEA,OAAOwG,UAAU;EACnB;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGE,SAAS1B,UAAU,CAAC5B,IAAI,EAAE1C,IAAI,EAAEnB,OAAO,EAAEuH,OAAO,EAAE;IAChD;IACA;IACA;IACA;IACA,IAAItH,GAAG,GAAG,CAAC;MACT2F,YAAY,EAAE,CAAC;IACjB,CAAC,CAAC;IAEF,IAAI/B,IAAI,YAAYhG,YAAY,IAAIsD,IAAI,YAAYtD,YAAY,IAAIgG,IAAI,YAAYnG,YAAY,IAAIyD,IAAI,YAAYzD,YAAY,EAAE;MAChI;MACA,IAAImG,IAAI,YAAYhG,YAAY,EAAE;QAChC,IAAIgG,IAAI,CAAC2D,EAAE,KAAKrG,IAAI,CAACqG,EAAE,IAAI3D,IAAI,CAAC4D,EAAE,KAAKtG,IAAI,CAACsG,EAAE,EAAE;UAC9C,OAAO,EAAE;QACX;MACF,CAAC,MAAM,IAAI5D,IAAI,YAAYnG,YAAY,EAAE;QACvC,IAAImG,IAAI,CAAC1H,IAAI,KAAKgF,IAAI,CAAChF,IAAI,EAAE;UAC3B,OAAO,EAAE;QACX;MACF,CAAC,CAAC;;MAGF,IAAIgF,IAAI,CAACuD,IAAI,CAAC9D,MAAM,KAAK,CAAC,IAAIiD,IAAI,CAACa,IAAI,CAAC9D,MAAM,KAAK,CAAC,IAAI,CAACzC,aAAa,CAACgD,IAAI,EAAEnB,OAAO,CAAC,IAAImB,IAAI,CAACuD,IAAI,CAAC9D,MAAM,KAAKiD,IAAI,CAACa,IAAI,CAAC9D,MAAM,IAAI2G,OAAO,EAAE;QACzI;QACA;QACA,IAAIP,YAAY,GAAG,EAAE;QAErB,KAAK,IAAIrG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGkD,IAAI,CAACa,IAAI,CAAC9D,MAAM,EAAED,CAAC,EAAE,EAAE;UACzC,IAAI+G,UAAU,GAAGjC,UAAU,CAAC5B,IAAI,CAACa,IAAI,CAAC/D,CAAC,CAAC,EAAEQ,IAAI,CAACuD,IAAI,CAAC/D,CAAC,CAAC,EAAEX,OAAO,CAAC;UAEhE,IAAI0H,UAAU,CAAC9G,MAAM,KAAK,CAAC,EAAE;YAC3B;YACA;UACF,CAAC,CAAC;;UAGFoG,YAAY,CAAChD,IAAI,CAAC0D,UAAU,CAAC;QAC/B;QAEA,IAAIV,YAAY,CAACpG,MAAM,KAAKiD,IAAI,CAACa,IAAI,CAAC9D,MAAM,EAAE;UAC5C,IAAI,CAAC1C,aAAa,CAACiD,IAAI,EAAEnB,OAAO,CAAC;UAAI;UACrC6D,IAAI,CAACa,IAAI,CAAC9D,MAAM,KAAK,CAAC,EAAE;YACtB;YACA,OAAO,EAAE;UACX;UAEA,IAAIiD,IAAI,CAACa,IAAI,CAAC9D,MAAM,GAAG,CAAC,EAAE;YACxB;AACZ;AACA;AACA;YACY,MAAM,IAAI+G,KAAK,CAAC,6EAA6E,CAAC;UAChG;UACA;;UAGA,IAAIC,SAAS,GAAGnC,UAAU,CAAC5B,IAAI,CAACa,IAAI,CAAC,CAAC,CAAC,EAAEvD,IAAI,CAACuD,IAAI,CAAC,CAAC,CAAC,EAAE1E,OAAO,CAAC;UAE/D,IAAI4H,SAAS,CAAChH,MAAM,KAAK,CAAC,EAAE;YAC1B,OAAO,EAAE;UACX;UAEA,IAAIiH,UAAU,GAAGpC,UAAU,CAAC5B,IAAI,CAACa,IAAI,CAAC,CAAC,CAAC,EAAEvD,IAAI,CAACuD,IAAI,CAAC,CAAC,CAAC,EAAE1E,OAAO,CAAC;UAEhE,IAAI6H,UAAU,CAACjH,MAAM,KAAK,CAAC,EAAE;YAC3B,OAAO,EAAE;UACX;UAEAoG,YAAY,GAAG,CAACY,SAAS,EAAEC,UAAU,CAAC;QACxC;QAEA5H,GAAG,GAAG8G,iBAAiB,CAACC,YAAY,CAAC;MACvC,CAAC,MAAM,IAAI7F,IAAI,CAACuD,IAAI,CAAC9D,MAAM,IAAI,CAAC,IAAIiD,IAAI,CAACa,IAAI,CAAC9D,MAAM,KAAK,CAAC,EAAE;QAC1D;QACA;QACA;QACA,IAAIkH,MAAM,GAAGjC,SAAS,CAAC1E,IAAI,EAAEnB,OAAO,CAAC;QACrC,IAAI+H,YAAY,GAAG,EAAE;QAErB,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGF,MAAM,CAAClH,MAAM,EAAEoH,GAAG,EAAE,EAAE;UAC5C,IAAIC,QAAQ,GAAGxC,UAAU,CAAC5B,IAAI,EAAEiE,MAAM,CAACE,GAAG,CAAC,EAAEhI,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;;UAG7D+H,YAAY,GAAGA,YAAY,CAAChH,MAAM,CAACkH,QAAQ,CAAC;QAC9C;QAEA,OAAOF,YAAY;MACrB,CAAC,MAAM,IAAIlE,IAAI,CAACa,IAAI,CAAC9D,MAAM,GAAG,CAAC,EAAE;QAC/B,MAAM+G,KAAK,CAAC,8CAA8C,GAAG9D,IAAI,CAACxD,QAAQ,EAAE,CAAC;MAC/E,CAAC,MAAM;QACL;QACA,OAAO,EAAE;MACX;IACF,CAAC,MAAM,IAAIwD,IAAI,YAAY9F,UAAU,EAAE;MACrC;MACA;MACA;MACA;MACA,IAAI8F,IAAI,CAAC1H,IAAI,CAACyE,MAAM,KAAK,CAAC,EAAE;QAC1B,MAAM,IAAI+G,KAAK,CAAC,kCAAkC,CAAC;MACrD;MAEA,IAAInG,mBAAmB,CAACqC,IAAI,CAAC1H,IAAI,CAAC,EAAE;QAClC;QACA,IAAI0H,IAAI,CAAC1H,IAAI,KAAKgF,IAAI,CAAChF,IAAI,EAAE;UAC3B,OAAO,EAAE;QACX;MACF,CAAC,MAAM,IAAI0H,IAAI,CAAC1H,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI0H,IAAI,CAAC1H,IAAI,CAAC+L,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,IAAI,EAAE;QACrE;QACA;QACA;QACAjI,GAAG,CAAC,CAAC,CAAC,CAAC2F,YAAY,CAAC/B,IAAI,CAAC1H,IAAI,CAAC,GAAGgF,IAAI;MACvC,CAAC,MAAM,IAAI0C,IAAI,CAAC1H,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;QAC/B;QACA,IAAI,CAACR,cAAc,CAACwF,IAAI,CAAC,EAAE;UACzBlB,GAAG,CAAC,CAAC,CAAC,CAAC2F,YAAY,CAAC/B,IAAI,CAAC1H,IAAI,CAAC,GAAGgF,IAAI;QACvC,CAAC,MAAM;UACL;UACA,OAAO,EAAE;QACX;MACF,CAAC,MAAM,IAAI0C,IAAI,CAAC1H,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;QAC/B;QACA,IAAIgF,IAAI,YAAY1D,YAAY,EAAE;UAChCwC,GAAG,CAAC,CAAC,CAAC,CAAC2F,YAAY,CAAC/B,IAAI,CAAC1H,IAAI,CAAC,GAAGgF,IAAI;QACvC,CAAC,MAAM;UACL;UACA,OAAO,EAAE;QACX;MACF,CAAC,MAAM;QACL,MAAM,IAAIwG,KAAK,CAAC,0BAA0B,GAAG9D,IAAI,CAAC1H,IAAI,CAAC;MACzD;IACF,CAAC,MAAM,IAAI0H,IAAI,YAAYpG,YAAY,EAAE;MACvC;MACA,IAAI,CAACT,KAAK,CAAC6G,IAAI,CAACsE,KAAK,EAAEhH,IAAI,CAACgH,KAAK,CAAC,EAAE;QAClC,OAAO,EAAE;MACX;IACF,CAAC,MAAM;MACL;MACA,OAAO,EAAE;IACX,CAAC,CAAC;IACF;;IAGA,OAAOlI,GAAG;EACZ;EACA;AACF;AACA;AACA;AACA;AACA;AACA;;EAGE,SAASsG,WAAW,CAAC6B,CAAC,EAAEC,CAAC,EAAE;IACzB,IAAID,CAAC,YAAY3K,YAAY,IAAI4K,CAAC,YAAY5K,YAAY,EAAE;MAC1D,IAAI,CAACT,KAAK,CAACoL,CAAC,CAACD,KAAK,EAAEE,CAAC,CAACF,KAAK,CAAC,EAAE;QAC5B,OAAO,KAAK;MACd;IACF,CAAC,MAAM,IAAIC,CAAC,YAAYrK,UAAU,IAAIsK,CAAC,YAAYtK,UAAU,EAAE;MAC7D,IAAIqK,CAAC,CAACjM,IAAI,KAAKkM,CAAC,CAAClM,IAAI,EAAE;QACrB,OAAO,KAAK;MACd;IACF,CAAC,MAAM,IAAIiM,CAAC,YAAYvK,YAAY,IAAIwK,CAAC,YAAYxK,YAAY,IAAIuK,CAAC,YAAY1K,YAAY,IAAI2K,CAAC,YAAY3K,YAAY,EAAE;MAC3H,IAAI0K,CAAC,YAAYvK,YAAY,EAAE;QAC7B,IAAIuK,CAAC,CAACZ,EAAE,KAAKa,CAAC,CAACb,EAAE,IAAIY,CAAC,CAACX,EAAE,KAAKY,CAAC,CAACZ,EAAE,EAAE;UAClC,OAAO,KAAK;QACd;MACF,CAAC,MAAM,IAAIW,CAAC,YAAY1K,YAAY,EAAE;QACpC,IAAI0K,CAAC,CAACjM,IAAI,KAAKkM,CAAC,CAAClM,IAAI,EAAE;UACrB,OAAO,KAAK;QACd;MACF;MAEA,IAAIiM,CAAC,CAAC1D,IAAI,CAAC9D,MAAM,KAAKyH,CAAC,CAAC3D,IAAI,CAAC9D,MAAM,EAAE;QACnC,OAAO,KAAK;MACd;MAEA,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGyH,CAAC,CAAC1D,IAAI,CAAC9D,MAAM,EAAED,CAAC,EAAE,EAAE;QACtC,IAAI,CAAC4F,WAAW,CAAC6B,CAAC,CAAC1D,IAAI,CAAC/D,CAAC,CAAC,EAAE0H,CAAC,CAAC3D,IAAI,CAAC/D,CAAC,CAAC,CAAC,EAAE;UACtC,OAAO,KAAK;QACd;MACF;IACF,CAAC,MAAM;MACL,OAAO,KAAK;IACd;IAEA,OAAO,IAAI;EACb;EAEA,OAAO/B,QAAQ;AACjB,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}